INFO: XSD validation is not available!
DEBUG: Target namespace: http://www.quantum-espresso.org/ns/neb
DEBUG: Namespaces: {'': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'xsi': 'http://www.w3.org/2001/XMLSchema-instance', u'neb': 'http://www.quantum-espresso.org/ns/neb', 'xsd': 'http://www.w3.org/2001/XMLSchema'}
DEBUG: Use prefix 'neb:' for schema declarations
DEBUG: ### Add global simple types ###
DEBUG: Type declarations to add: 19
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'stringMethodType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:stringMethodType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c5dc250>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c5dc290>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc2d0>
DEBUG: Added enumeration: neb
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc310>
DEBUG: Added enumeration: smd
DEBUG: Create instance for simple type 'neb:stringMethodType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'optimizationSchemeType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:optimizationSchemeType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c5dc350>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c5dc3d0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc410>
DEBUG: Added enumeration: sd
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc450>
DEBUG: Added enumeration: broyden
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc490>
DEBUG: Added enumeration: broyden2
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc4d0>
DEBUG: Added enumeration: quick-min
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc510>
DEBUG: Added enumeration: langevin
DEBUG: Create instance for simple type 'neb:optimizationSchemeType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'climbingImageType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:climbingImageType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c5dc550>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c5dc590>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc5d0>
DEBUG: Added enumeration: no-CI
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc610>
DEBUG: Added enumeration: auto
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c5dc650>
DEBUG: Added enumeration: manual
DEBUG: Create instance for simple type 'neb:climbingImageType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'calculationType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:calculationType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c137910>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c1378d0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137950>
DEBUG: Added enumeration: scf
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137990>
DEBUG: Added enumeration: nscf
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c1379d0>
DEBUG: Added enumeration: bands
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137a10>
DEBUG: Added enumeration: relax
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137a50>
DEBUG: Added enumeration: vc-relax
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137a90>
DEBUG: Added enumeration: md
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137ad0>
DEBUG: Added enumeration: vc-md
DEBUG: Create instance for simple type 'neb:calculationType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'controlRestartModeType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:controlRestartModeType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c137b10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c137b90>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137bd0>
DEBUG: Added enumeration: from_scratch
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137c10>
DEBUG: Added enumeration: restart
DEBUG: Create instance for simple type 'neb:controlRestartModeType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'lowhighType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:lowhighType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c137c50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c137c90>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137cd0>
DEBUG: Added enumeration: low
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c137d10>
DEBUG: Added enumeration: high
DEBUG: Create instance for simple type 'neb:lowhighType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'functionalType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:functionalType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c143ad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c143a90>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143b10>
DEBUG: Added enumeration: PZ
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143b50>
DEBUG: Added enumeration: BP
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143b90>
DEBUG: Added enumeration: PBE
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143bd0>
DEBUG: Added enumeration: REVPBE
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143c10>
DEBUG: Added enumeration: PBESOL
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143c50>
DEBUG: Added enumeration: BLYP
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143c90>
DEBUG: Added enumeration: OLYP
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143cd0>
DEBUG: Added enumeration: PW91
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143d10>
DEBUG: Added enumeration: WC
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143d50>
DEBUG: Added enumeration: SOGGA
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143d90>
DEBUG: Added enumeration: EV93
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143dd0>
DEBUG: Added enumeration: B3LYP
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143e10>
DEBUG: Added enumeration: PBE0
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143e50>
DEBUG: Added enumeration: HSE
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143e90>
DEBUG: Added enumeration: VDW-DF
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143ed0>
DEBUG: Added enumeration: VDW-DF-CX
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143f10>
DEBUG: Added enumeration: VDW-DF-C09
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143f50>
DEBUG: Added enumeration: VDW-DF-OB86
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143f90>
DEBUG: Added enumeration: VDW-DF-OBK8
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c143fd0>
DEBUG: Added enumeration: VDW-DF2
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14f050>
DEBUG: Added enumeration: VDW-DF2-C09
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14f090>
DEBUG: Added enumeration: VDW-DF2-B86R
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14f0d0>
DEBUG: Added enumeration: RVV10
DEBUG: Create instance for simple type 'neb:functionalType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'HubbardProjType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:HubbardProjType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c14fed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c14fe10>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14ff10>
DEBUG: Added enumeration: atomic
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14ff50>
DEBUG: Added enumeration: ortho-atomic
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14ff90>
DEBUG: Added enumeration: norm-atomic
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c14ffd0>
DEBUG: Added enumeration: pseudo
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c15c050>
DEBUG: Added enumeration: file
DEBUG: Create instance for simple type 'neb:HubbardProjType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'smearingChoiceType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:smearingChoiceType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c15c850>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c15c890>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c15c8d0>
DEBUG: Added enumeration: gaussian
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c15c910>
DEBUG: Added enumeration: mp
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c15c950>
DEBUG: Added enumeration: mv
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c15c990>
DEBUG: Added enumeration: fd
DEBUG: Create instance for simple type 'neb:smearingChoiceType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'mixingModeType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:mixingModeType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c1678d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c167890>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c167910>
DEBUG: Added enumeration: plain
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c167950>
DEBUG: Added enumeration: TF
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c167990>
DEBUG: Added enumeration: local-TF
DEBUG: Create instance for simple type 'neb:mixingModeType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'diagoType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:diagoType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c1679d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c167a10>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c167a50>
DEBUG: Added enumeration: davidson
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c167a90>
DEBUG: Added enumeration: cg
DEBUG: Create instance for simple type 'neb:diagoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'electric_potentialType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:electric_potentialType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c101610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c1016d0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101710>
DEBUG: Added enumeration: sawtooth_potential
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101750>
DEBUG: Added enumeration: homogenous_field
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101790>
DEBUG: Added enumeration: Berry_Phase
DEBUG: Create instance for simple type 'neb:electric_potentialType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'constr_parms_listType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:constr_parms_listType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c101b50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c101bd0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c101c10>
DEBUG: xsd_simple_type_factory: elem.attrib={}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse local simpleType: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c101c10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}list' at 0x7f2e8c101c50>]
DEBUG: Found 'list' tag
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>': double
DEBUG: Create instance for simple type 'None' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}length' at 0x7f2e8c101c90>
DEBUG: Added a 'length == 4' restriction
DEBUG: Create instance for simple type 'neb:constr_parms_listType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c0571d0>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'constr_typeType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:constr_typeType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c101d10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c101cd0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>': string
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101d50>
DEBUG: Added enumeration: type_coord
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101d90>
DEBUG: Added enumeration: atom_coord
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101dd0>
DEBUG: Added enumeration: distance
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101e10>
DEBUG: Added enumeration: planar_angle
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101e90>
DEBUG: Added enumeration: torsional_angle
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c101e50>
DEBUG: Added enumeration: bennet_proj
DEBUG: Create instance for simple type 'neb:constr_typeType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'statusType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:statusType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121890>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c1218d0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627810>': integer
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c121910>
DEBUG: Added enumeration: 0
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c121950>
DEBUG: Added enumeration: 1
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c121990>
DEBUG: Added enumeration: 2
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c1219d0>
DEBUG: Added enumeration: 3
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}enumeration' at 0x7f2e8c121a10>
DEBUG: Added enumeration: 255
DEBUG: Create instance for simple type 'neb:statusType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627810>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'd3vectorType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:d3vectorType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121a50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c121a90>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121ad0>
DEBUG: xsd_simple_type_factory: elem.attrib={}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse local simpleType: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121ad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}list' at 0x7f2e8c121b10>]
DEBUG: Found 'list' tag
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>': double
DEBUG: Create instance for simple type 'None' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}length' at 0x7f2e8c121b50>
DEBUG: Added a 'length == 3' restriction
DEBUG: Create instance for simple type 'neb:d3vectorType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057390>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'vectorType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:vectorType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121b90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c121bd0>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121c10>
DEBUG: xsd_simple_type_factory: elem.attrib={}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse local simpleType: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121c10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}list' at 0x7f2e8c121c50>]
DEBUG: Found 'list' tag
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>': double
DEBUG: Create instance for simple type 'None' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: Create instance for simple type 'neb:vectorType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057510>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'integerListType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:integerListType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121cd0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}restriction' at 0x7f2e8c121c90>]
DEBUG: Found 'restriction' tag: {http://www.w3.org/2001/XMLSchema}restriction
DEBUG: Parse restriction child: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121d10>
DEBUG: xsd_simple_type_factory: elem.attrib={}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse local simpleType: <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121d10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}list' at 0x7f2e8c121d50>]
DEBUG: Found 'list' tag
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627810>': integer
DEBUG: Create instance for simple type 'None' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627810>'
DEBUG: Create instance for simple type 'neb:integerListType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057550>'
DEBUG: xsd_simple_type_factory: elem.attrib={'name': 'doubleListType'}, kwargs=['xsd_types', 'prefix']
DEBUG: Parse global simpleType 'neb:doubleListType': <Element '{http://www.w3.org/2001/XMLSchema}simpleType' at 0x7f2e8c121dd0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}list' at 0x7f2e8c121d90>]
DEBUG: Found 'list' tag
DEBUG: Associated to base type '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>': double
DEBUG: Create instance for simple type 'neb:doubleListType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: Type declarations added: 19
DEBUG: ### Add global attributes ###
DEBUG: 0 global attributes added
DEBUG: ### Add attribute groups ###
DEBUG: 0 attribute groups added
DEBUG: ### Add global complex types ###
DEBUG: Type declarations to add: 85
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'NebRunType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:NebRunType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c5210>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c5310>]
DEBUG: Create instance for complex type 'neb:NebRunType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebPInfoType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebPInfoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c56d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c5790>]
DEBUG: Create instance for complex type 'neb:nebPInfoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebInputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c5890>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c58d0>]
DEBUG: Create instance for complex type 'neb:nebInputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'pathInputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:pathInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c5990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c59d0>]
DEBUG: Create instance for complex type 'neb:pathInputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'engineInputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:engineInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2110>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2090>]
DEBUG: Create instance for complex type 'neb:engineInputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebStepType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebStepType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d29d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2a10>]
DEBUG: Create instance for complex type 'neb:nebStepType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebOutputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebOutputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2c50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2c90>]
DEBUG: Create instance for complex type 'neb:nebOutputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'imageGradientType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:imageGradientType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2e50>]
DEBUG: Create instance for complex type 'neb:imageGradientType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'plotType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:plotType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2e90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2f50>]
DEBUG: Create instance for complex type 'neb:plotType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebBeadType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebBeadType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2f90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dc090>]
DEBUG: Create instance for complex type 'neb:nebBeadType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'manyPosStructType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:manyPosStructType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5dc690>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dc6d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c5dc8d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c5dc890>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c5dc950>]
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nat'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nat' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'double', 'name': 'alat'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'alat' mapped to global simple type 'double'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'positiveInteger', 'name': 'bravais_index'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'bravais_index' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:manyPosStructType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'general_infoType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:general_infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5dc910>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dc990>]
DEBUG: Create instance for complex type 'neb:general_infoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'parallel_infoType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:parallel_infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5dcad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dcb10>]
DEBUG: Create instance for complex type 'neb:parallel_infoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'inputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:inputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5dcb50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dcd10>]
DEBUG: Create instance for complex type 'neb:inputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'stepType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:stepType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5e7650>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5e7690>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c5e7950>]
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'n_step'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'n_step' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:stepType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'outputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:outputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5e78d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5e7990>]
DEBUG: Create instance for complex type 'neb:outputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'control_variablesType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:control_variablesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5e7f50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137050>]
DEBUG: Create instance for complex type 'neb:control_variablesType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'xml_formatType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:xml_formatType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137550>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c137450>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'NAME'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'NAME' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'VERSION'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'VERSION' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:xml_formatType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'creatorType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:creatorType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137650>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c137690>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'NAME'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'NAME' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'VERSION'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'VERSION' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:creatorType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'createdType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:createdType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137790>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c1377d0>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'DATE'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'DATE' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'TIME'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'TIME' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:createdType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_speciesType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_speciesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137d50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137d90>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c137e50>]
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ntyp'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'ntyp' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:atomic_speciesType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'speciesType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:speciesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137dd0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137e90>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143090>]
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'name'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'name' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:speciesType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_structureType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_structureType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1430d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143150>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143350>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143310>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c1433d0>]
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nat'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nat' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'double', 'name': 'alat'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'alat' mapped to global simple type 'double'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'positiveInteger', 'name': 'bravais_index'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'bravais_index' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:atomic_structureType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_positionsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143450>]
DEBUG: Create instance for complex type 'neb:atomic_positionsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'name'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'name' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'string', 'name': 'position'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'position' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'positiveInteger', 'name': 'index'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'index' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:atomType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057250>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'wyckoff_positionsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:wyckoff_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1436d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143750>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143790>]
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'unsignedByte', 'name': 'space_group'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'space_group' mapped to global simple type 'unsignedByte'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'string', 'name': 'more_options'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'more_options' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:wyckoff_positionsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cellType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cellType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1437d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143810>]
DEBUG: Create instance for complex type 'neb:cellType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dftType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dftType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143910>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143950>]
DEBUG: Create instance for complex type 'neb:dftType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'hybridType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:hybridType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f110>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c14f150>]
DEBUG: Create instance for complex type 'neb:hybridType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'qpoint_gridType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:qpoint_gridType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f3d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f390>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nqx1'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nqx1' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nqx2'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nqx2' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nqx3'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nqx3' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:qpoint_gridType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dftUType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dftUType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f450>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c14f550>]
DEBUG: Create instance for complex type 'neb:dftUType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'specie'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'specie' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'label'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'label' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:HubbardCommonType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardJType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardJType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fa10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fa50>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'specie'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'specie' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'label'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'label' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:HubbardJType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057250>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'starting_nsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:starting_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fb90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fb50>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'specie'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'specie' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'label'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'label' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'spin'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'spin' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:starting_nsType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057450>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'Hubbard_nsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:Hubbard_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fd10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fc90>]
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'vdWType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:vdWType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c0d0>]
DEBUG: Create instance for complex type 'neb:vdWType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'spinType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:spinType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c3d0>]
DEBUG: Create instance for complex type 'neb:spinType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'bandsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:bandsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c4d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c510>]
DEBUG: Create instance for complex type 'neb:bandsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'smearingType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:smearingType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c710>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c15c750>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'double', 'name': 'degauss'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'degauss' mapped to global simple type 'double'
DEBUG: Create instance for complex type 'neb:smearingType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057090>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'occupationsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:occupationsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15ca10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c15c9d0>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'positiveInteger', 'name': 'spin'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'spin' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:occupationsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15ca90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15cb10>]
DEBUG: Create instance for complex type 'neb:basisType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basis_setType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basis_setType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15cd90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15cdd0>]
DEBUG: Create instance for complex type 'neb:basis_setType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nr1'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nr1' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nr2'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nr2' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nr3'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nr3' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:basisSetItemType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'reciprocal_latticeType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:reciprocal_latticeType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167290>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1673d0>]
DEBUG: Create instance for complex type 'neb:reciprocal_latticeType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electron_controlType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electron_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1674d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c167550>]
DEBUG: Create instance for complex type 'neb:electron_controlType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'k_points_IBZType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:k_points_IBZType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167ad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}choice' at 0x7f2e8c167b10>]
DEBUG: Create instance for complex type 'neb:k_points_IBZType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'monkhorst_packType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:monkhorst_packType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167c10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167cd0>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nk1'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nk1' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nk2'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nk2' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nk3'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nk3' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'nonNegativeInteger', 'name': 'k1'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'k1' mapped to global simple type 'nonNegativeInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'nonNegativeInteger', 'name': 'k2'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'k2' mapped to global simple type 'nonNegativeInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'nonNegativeInteger', 'name': 'k3'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'k3' mapped to global simple type 'nonNegativeInteger'
DEBUG: Create instance for complex type 'neb:monkhorst_packType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'k_pointType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:k_pointType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167f10>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'double', 'name': 'weight'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'weight' mapped to global simple type 'double'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'string', 'name': 'label'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'label' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:k_pointType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057250>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ion_controlType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ion_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4050>]
DEBUG: Create instance for complex type 'neb:ion_controlType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'bfgsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:bfgsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4250>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4290>]
DEBUG: Create instance for complex type 'neb:bfgsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'mdType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:mdType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4450>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4490>]
DEBUG: Create instance for complex type 'neb:mdType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cell_controlType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cell_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4690>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4710>]
DEBUG: Create instance for complex type 'neb:cell_controlType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'symmetry_flagsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:symmetry_flagsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f49d0>]
DEBUG: Create instance for complex type 'neb:symmetry_flagsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'boundary_conditionsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:boundary_conditionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4b90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4c10>]
DEBUG: Create instance for complex type 'neb:boundary_conditionsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'esmType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:esmType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4d50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4d90>]
DEBUG: Create instance for complex type 'neb:esmType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ekin_functionalType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ekin_functionalType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4f10>]
DEBUG: Create instance for complex type 'neb:ekin_functionalType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'spin_constraintsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:spin_constraintsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101050>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1010d0>]
DEBUG: Create instance for complex type 'neb:spin_constraintsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electric_fieldType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electric_fieldType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101210>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101250>]
DEBUG: Create instance for complex type 'neb:electric_fieldType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_constraintsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_constraintsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1017d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101850>]
DEBUG: Create instance for complex type 'neb:atomic_constraintsType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_constraintType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_constraintType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101a10>]
DEBUG: Create instance for complex type 'neb:atomic_constraintType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'inputOccupationsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:inputOccupationsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c101f50>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ispin'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'ispin' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'double', 'name': 'spin_factor'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'spin_factor' mapped to global simple type 'double'
DEBUG: Create instance for complex type 'neb:inputOccupationsType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057450>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'outputElectricFieldType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:outputElectricFieldType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10b090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10b110>]
DEBUG: Create instance for complex type 'neb:outputElectricFieldType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'BerryPhaseOutputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:BerryPhaseOutputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10b310>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10b390>]
DEBUG: Create instance for complex type 'neb:BerryPhaseOutputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dipoleOutputType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dipoleOutputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10b590>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10b5d0>]
DEBUG: Create instance for complex type 'neb:dipoleOutputType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'finiteFieldOutType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:finiteFieldOutType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10b950>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10b990>]
DEBUG: Create instance for complex type 'neb:finiteFieldOutType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'polarizationType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:polarizationType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10ba50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10ba90>]
DEBUG: Create instance for complex type 'neb:polarizationType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ionicPolarizationType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ionicPolarizationType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10bbd0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10bc50>]
DEBUG: Create instance for complex type 'neb:ionicPolarizationType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electronicPolarizationType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electronicPolarizationType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10bd50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c10bdd0>]
DEBUG: Create instance for complex type 'neb:electronicPolarizationType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'phaseType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:phaseType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c10bed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c10bf10>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'double', 'name': 'ionic'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'ionic' mapped to global simple type 'double'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'double', 'name': 'electronic'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'electronic' mapped to global simple type 'double'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'string', 'name': 'modulus'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'modulus' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:phaseType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'convergence_infoType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:convergence_infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c115090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115110>]
DEBUG: Create instance for complex type 'neb:convergence_infoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'scf_convType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:scf_convType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1151d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115210>]
DEBUG: Create instance for complex type 'neb:scf_convType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'opt_convType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:opt_convType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1152d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115310>]
DEBUG: Create instance for complex type 'neb:opt_convType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'algorithmic_infoType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:algorithmic_infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1153d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115450>]
DEBUG: Create instance for complex type 'neb:algorithmic_infoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'symmetriesType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:symmetriesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c115590>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115550>]
DEBUG: Create instance for complex type 'neb:symmetriesType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'symmetryType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:symmetryType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1156d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115710>]
DEBUG: Create instance for complex type 'neb:symmetryType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'equivalent_atomsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:equivalent_atomsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1158d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c115950>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nat'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'nat' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:equivalent_atomsType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c0573d0>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'infoType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1159d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c115a50>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'string', 'name': 'name'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'name' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'string', 'name': 'class'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'class' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'use': 'optional', 'type': 'boolean', 'name': 'time_reversal'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'time_reversal' mapped to global simple type 'boolean'
DEBUG: Create instance for complex type 'neb:infoType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'magnetizationType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:magnetizationType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c115b90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115bd0>]
DEBUG: Create instance for complex type 'neb:magnetizationType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'total_energyType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:total_energyType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c115d90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c115dd0>]
DEBUG: Create instance for complex type 'neb:total_energyType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'band_structureType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:band_structureType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1210d0>]
DEBUG: Create instance for complex type 'neb:band_structureType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ks_energiesType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ks_energiesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1215d0>]
DEBUG: Create instance for complex type 'neb:ks_energiesType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'closedType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:closedType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121650>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121790>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'DATE'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'DATE' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'TIME'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'TIME' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:closedType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627790>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Found extension tag
DEBUG: Create instance for complex type 'neb:matrixType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c057590>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'integerMatrixType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:integerMatrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121f10>]
DEBUG: Found extension tag
DEBUG: Create instance for complex type 'neb:integerMatrixType' based on '<qespresso.xsdtypes.xsdtypes.XSDSimpleType object at 0x7f2e8c0573d0>'
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'scalarQuantityType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:scalarQuantityType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121f90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121fd0>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'Units'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'Units' mapped to global simple type 'string'
DEBUG: Create instance for complex type 'neb:scalarQuantityType' based on '<qespresso.xsdtypes.xsdtypes.XSDType object at 0x7f2e8c627950>'
DEBUG: Retry for 1 missing reference declarations
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'Hubbard_nsType'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:Hubbard_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fd10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fc90>]
DEBUG: Found extension tag
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'specie'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'specie' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'string', 'name': 'label'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'label' mapped to global simple type 'string'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'spin'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'spin' mapped to global simple type 'positiveInteger'
DEBUG: xsd_attribute_type_factory: elem.attrib={'type': 'positiveInteger', 'name': 'index'}, kwargs=['xsd_types', 'prefix', 'xsd_attributes']
DEBUG: Attribute 'index' mapped to global simple type 'positiveInteger'
DEBUG: Create instance for complex type 'neb:Hubbard_nsType' based on '<qespresso.xsdtypes.xsdtypes.XSDComplexType object at 0x7f2e8bffec50>'
DEBUG: Type declarations added: 85
DEBUG: ### Add content model groups ###
DEBUG: 0 XSD named groups added
DEBUG: ### Add elements starting from root element(s) ###
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:NebRunType', 'name': 'nebRun'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nebRun': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5250>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'NebRunType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:NebRunType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c5210>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c5310>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:general_infoType', 'name': 'GeneralInfo', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:GeneralInfo': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c53d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'general_infoType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:general_infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5dc910>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dc990>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:xml_formatType', 'name': 'xml_format'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:xml_format': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc9d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'xml_formatType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:xml_formatType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137550>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c137450>]
DEBUG: Return existing complex type 'neb:xml_formatType'
DEBUG: Add element 'neb:xml_format' with path './GeneralInfo/xml_format'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:creatorType', 'name': 'creator'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:creator': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dca50>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'creatorType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:creatorType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137650>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c137690>]
DEBUG: Return existing complex type 'neb:creatorType'
DEBUG: Add element 'neb:creator' with path './GeneralInfo/creator'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:createdType', 'name': 'created'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:created': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dca90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'createdType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:createdType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137790>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c1377d0>]
DEBUG: Return existing complex type 'neb:createdType'
DEBUG: Add element 'neb:created' with path './GeneralInfo/created'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'job'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:job': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dca10>
DEBUG: Children: []
DEBUG: Add element 'neb:job' with path './GeneralInfo/job'
DEBUG: Return existing complex type 'neb:general_infoType'
DEBUG: Add element 'neb:GeneralInfo' with path './GeneralInfo'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:nebPInfoType', 'name': 'ParallelInfo', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ParallelInfo': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5590>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebPInfoType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebPInfoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c56d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c5790>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nimages'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nimages': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5810>
DEBUG: Children: []
DEBUG: Add element 'neb:nimages' with path './ParallelInfo/nimages'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:parallel_infoType', 'name': 'parallelInfo'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:parallelInfo': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c57d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'parallel_infoType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:parallel_infoType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5dcad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dcb10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nprocs'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nprocs': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dcb90>
DEBUG: Children: []
DEBUG: Add element 'neb:nprocs' with path './ParallelInfo/parallelInfo/nprocs'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nthreads'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nthreads': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dcbd0>
DEBUG: Children: []
DEBUG: Add element 'neb:nthreads' with path './ParallelInfo/parallelInfo/nthreads'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ntasks'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ntasks': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dcc10>
DEBUG: Children: []
DEBUG: Add element 'neb:ntasks' with path './ParallelInfo/parallelInfo/ntasks'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nbgrp'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nbgrp': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dcc50>
DEBUG: Children: []
DEBUG: Add element 'neb:nbgrp' with path './ParallelInfo/parallelInfo/nbgrp'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'npool'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:npool': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dcc90>
DEBUG: Children: []
DEBUG: Add element 'neb:npool' with path './ParallelInfo/parallelInfo/npool'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ndiag'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ndiag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dccd0>
DEBUG: Children: []
DEBUG: Add element 'neb:ndiag' with path './ParallelInfo/parallelInfo/ndiag'
DEBUG: Return existing complex type 'neb:parallel_infoType'
DEBUG: Add element 'neb:parallelInfo' with path './ParallelInfo/parallelInfo'
DEBUG: Return existing complex type 'neb:nebPInfoType'
DEBUG: Add element 'neb:ParallelInfo' with path './ParallelInfo'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:nebInputType', 'name': 'input', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:input': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c55d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebInputType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c5890>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c58d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:pathInputType', 'name': 'path'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:path': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5910>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'pathInputType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:pathInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5c5990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5c59d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:stringMethodType', 'name': 'stringMethod'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:stringMethod': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5a10>
DEBUG: Children: []
DEBUG: Add element 'neb:stringMethod' with path './input/path/stringMethod'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'default': 'from_scratch', 'type': 'neb:controlRestartModeType', 'name': 'restart_mode'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:restart_mode': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5a90>
DEBUG: Children: []
DEBUG: Add element 'neb:restart_mode' with path './input/path/restart_mode'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'positiveInteger', 'name': 'pathNstep', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pathNstep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5b50>
DEBUG: Children: []
DEBUG: Add element 'neb:pathNstep' with path './input/path/pathNstep'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'numOfImages', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:numOfImages': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5b90>
DEBUG: Children: []
DEBUG: Add element 'neb:numOfImages' with path './input/path/numOfImages'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:optimizationSchemeType', 'name': 'optimizationScheme', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:optimizationScheme': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5b10>
DEBUG: Children: []
DEBUG: Add element 'neb:optimizationScheme' with path './input/path/optimizationScheme'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'default': 'no-CI', 'type': 'neb:climbingImageType', 'name': 'climbingImage'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:climbingImage': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5c10>
DEBUG: Children: []
DEBUG: Add element 'neb:climbingImage' with path './input/path/climbingImage'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'default': 'false', 'type': 'boolean', 'name': 'endImagesOptimizationFlag'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:endImagesOptimizationFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5c90>
DEBUG: Children: []
DEBUG: Add element 'neb:endImagesOptimizationFlag' with path './input/path/endImagesOptimizationFlag'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'default': 'false', 'type': 'boolean', 'name': 'minimumImageFlag'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:minimumImageFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5d10>
DEBUG: Children: []
DEBUG: Add element 'neb:minimumImageFlag' with path './input/path/minimumImageFlag'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'temperature', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:temperature': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5d50>
DEBUG: Children: []
DEBUG: Add element 'neb:temperature' with path './input/path/temperature'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'optimizationStepLength', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:optimizationStepLength': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5d90>
DEBUG: Children: []
DEBUG: Add element 'neb:optimizationStepLength' with path './input/path/optimizationStepLength'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'pathThreshold'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pathThreshold': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5e10>
DEBUG: Children: []
DEBUG: Add element 'neb:pathThreshold' with path './input/path/pathThreshold'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'elasticConstMax', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:elasticConstMax': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5e90>
DEBUG: Children: []
DEBUG: Add element 'neb:elasticConstMax' with path './input/path/elasticConstMax'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'elasticConstMin', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:elasticConstMin': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5ed0>
DEBUG: Children: []
DEBUG: Add element 'neb:elasticConstMin' with path './input/path/elasticConstMin'
DEBUG: xsd_element_factory: elem.attrib={'default': 'false', 'maxOccurs': '1', 'type': 'boolean', 'name': 'useMassesFlag'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:useMassesFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5e50>
DEBUG: Children: []
DEBUG: Add element 'neb:useMassesFlag' with path './input/path/useMassesFlag'
DEBUG: xsd_element_factory: elem.attrib={'default': 'false', 'maxOccurs': '1', 'type': 'boolean', 'name': 'useFreezingFlag'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:useFreezingFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5f50>
DEBUG: Children: []
DEBUG: Add element 'neb:useFreezingFlag' with path './input/path/useFreezingFlag'
DEBUG: xsd_element_factory: elem.attrib={'default': 'false', 'maxOccurs': '1', 'type': 'boolean', 'name': 'constantBiasFlag', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constantBiasFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5f10>
DEBUG: Children: []
DEBUG: Add element 'neb:constantBiasFlag' with path './input/path/constantBiasFlag'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'targetFermiEnergy', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:targetFermiEnergy': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5f90>
DEBUG: Children: []
DEBUG: Add element 'neb:targetFermiEnergy' with path './input/path/targetFermiEnergy'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'totChargeFirst', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:totChargeFirst': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2050>
DEBUG: Children: []
DEBUG: Add element 'neb:totChargeFirst' with path './input/path/totChargeFirst'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'totChargeLast', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:totChargeLast': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5fd0>
DEBUG: Children: []
DEBUG: Add element 'neb:totChargeLast' with path './input/path/totChargeLast'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'positiveInteger', 'name': 'climbingImageIndex', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:climbingImageIndex': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d20d0>
DEBUG: Children: []
DEBUG: Add element 'neb:climbingImageIndex' with path './input/path/climbingImageIndex'
DEBUG: Return existing complex type 'neb:pathInputType'
DEBUG: Add element 'neb:path' with path './input/path'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:engineInputType', 'name': 'engine'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:engine': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5950>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'engineInputType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:engineInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2110>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2090>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:control_variablesType', 'name': 'control_variables'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:control_variables': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2150>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'control_variablesType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:control_variablesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5e7f50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137050>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'title'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:title': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137090>
DEBUG: Children: []
DEBUG: Add element 'neb:title' with path './input/engine/control_variables/title'
DEBUG: xsd_element_factory: elem.attrib={'default': 'scf', 'type': 'neb:calculationType', 'name': 'calculation'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:calculation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1370d0>
DEBUG: Children: []
DEBUG: Add element 'neb:calculation' with path './input/engine/control_variables/calculation'
DEBUG: xsd_element_factory: elem.attrib={'default': 'from_scratch', 'type': 'neb:controlRestartModeType', 'name': 'restart_mode'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:restart_mode': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137110>
DEBUG: Children: []
DEBUG: Add element 'neb:restart_mode' with path './input/engine/control_variables/restart_mode'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'prefix'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:prefix': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137190>
DEBUG: Children: []
DEBUG: Add element 'neb:prefix' with path './input/engine/control_variables/prefix'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'pseudo_dir'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pseudo_dir': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1371d0>
DEBUG: Children: []
DEBUG: Add element 'neb:pseudo_dir' with path './input/engine/control_variables/pseudo_dir'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'outdir'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:outdir': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137210>
DEBUG: Children: []
DEBUG: Add element 'neb:outdir' with path './input/engine/control_variables/outdir'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'stress'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:stress': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137250>
DEBUG: Children: []
DEBUG: Add element 'neb:stress' with path './input/engine/control_variables/stress'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'forces'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:forces': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137290>
DEBUG: Children: []
DEBUG: Add element 'neb:forces' with path './input/engine/control_variables/forces'
DEBUG: xsd_element_factory: elem.attrib={'default': 'false', 'type': 'boolean', 'name': 'wf_collect'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wf_collect': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1372d0>
DEBUG: Children: []
DEBUG: Add element 'neb:wf_collect' with path './input/engine/control_variables/wf_collect'
DEBUG: xsd_element_factory: elem.attrib={'default': 'low', 'type': 'neb:lowhighType', 'name': 'disk_io'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:disk_io': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137350>
DEBUG: Children: []
DEBUG: Add element 'neb:disk_io' with path './input/engine/control_variables/disk_io'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'max_seconds'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:max_seconds': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137390>
DEBUG: Children: []
DEBUG: Add element 'neb:max_seconds' with path './input/engine/control_variables/max_seconds'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nstep', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nstep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1373d0>
DEBUG: Children: []
DEBUG: Add element 'neb:nstep' with path './input/engine/control_variables/nstep'
DEBUG: xsd_element_factory: elem.attrib={'default': '1.0e-5', 'type': 'double', 'name': 'etot_conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:etot_conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137310>
DEBUG: Children: []
DEBUG: Add element 'neb:etot_conv_thr' with path './input/engine/control_variables/etot_conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'default': '1.0e-3', 'type': 'double', 'name': 'forc_conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:forc_conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137410>
DEBUG: Children: []
DEBUG: Add element 'neb:forc_conv_thr' with path './input/engine/control_variables/forc_conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'default': '5e-1', 'type': 'double', 'name': 'press_conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:press_conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137490>
DEBUG: Children: []
DEBUG: Add element 'neb:press_conv_thr' with path './input/engine/control_variables/press_conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'default': 'low', 'type': 'neb:lowhighType', 'name': 'verbosity'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:verbosity': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1374d0>
DEBUG: Children: []
DEBUG: Add element 'neb:verbosity' with path './input/engine/control_variables/verbosity'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'print_every'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:print_every': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137510>
DEBUG: Children: []
DEBUG: Add element 'neb:print_every' with path './input/engine/control_variables/print_every'
DEBUG: Return existing complex type 'neb:control_variablesType'
DEBUG: Add element 'neb:control_variables' with path './input/engine/control_variables'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_speciesType', 'name': 'atomic_species'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_species': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2210>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_speciesType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_speciesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137d50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137d90>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c137e50>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:speciesType', 'name': 'species'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:species': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137e10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'speciesType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:speciesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137dd0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137e90>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143090>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'mass', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mass': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137ed0>
DEBUG: Children: []
DEBUG: Add element 'neb:mass' with path './input/engine/atomic_species/species/mass'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'pseudo_file'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pseudo_file': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137f10>
DEBUG: Children: []
DEBUG: Add element 'neb:pseudo_file' with path './input/engine/atomic_species/species/pseudo_file'
DEBUG: xsd_element_factory: elem.attrib={'default': '0.0', 'type': 'double', 'name': 'starting_magnetization', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:starting_magnetization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137f50>
DEBUG: Children: []
DEBUG: Add element 'neb:starting_magnetization' with path './input/engine/atomic_species/species/starting_magnetization'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'spin_teta', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_teta': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137fd0>
DEBUG: Children: []
DEBUG: Add element 'neb:spin_teta' with path './input/engine/atomic_species/species/spin_teta'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'spin_phi', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_phi': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143050>
DEBUG: Children: []
DEBUG: Add element 'neb:spin_phi' with path './input/engine/atomic_species/species/spin_phi'
DEBUG: Return existing complex type 'neb:speciesType'
DEBUG: Add element 'neb:species' with path './input/engine/atomic_species/species'
DEBUG: Return existing complex type 'neb:atomic_speciesType'
DEBUG: Add element 'neb:atomic_species' with path './input/engine/atomic_species'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomic_structureType', 'name': 'atomic_structure', 'minOccurs': '2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_structure': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d21d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_structureType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_structureType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1430d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143150>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143350>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143310>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c1433d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_group_factory: elem.attrib={'maxOccurs': '1', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_positionsType', 'name': 'atomic_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1431d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_positionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143450>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143490>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Return existing complex type 'neb:atomic_positionsType'
DEBUG: Add element 'neb:atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:wyckoff_positionsType', 'name': 'wyckoff_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wyckoff_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143250>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'wyckoff_positionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:wyckoff_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1436d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143750>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143790>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143710>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './input/engine/atomic_structure/wyckoff_positions/atom'
DEBUG: Return existing complex type 'neb:wyckoff_positionsType'
DEBUG: Add element 'neb:wyckoff_positions' with path './input/engine/atomic_structure/wyckoff_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:cellType', 'name': 'cell'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1432d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cellType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cellType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1437d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143810>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143850>
DEBUG: Children: []
DEBUG: Add element 'neb:a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143890>
DEBUG: Children: []
DEBUG: Add element 'neb:a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a3'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a3': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1438d0>
DEBUG: Children: []
DEBUG: Add element 'neb:a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Return existing complex type 'neb:cellType'
DEBUG: Add element 'neb:cell' with path './input/engine/atomic_structure/cell'
DEBUG: Return existing complex type 'neb:atomic_structureType'
DEBUG: Add element 'neb:atomic_structure' with path './input/engine/atomic_structure'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:dftType', 'name': 'dft'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:dft': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d22d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dftType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dftType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143910>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143950>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:functionalType', 'name': 'functional'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:functional': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143990>
DEBUG: Children: []
DEBUG: Add element 'neb:functional' with path './input/engine/dft/functional'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:hybridType', 'name': 'hybrid', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:hybrid': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143a10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'hybridType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:hybridType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f110>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c14f150>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:qpoint_gridType', 'name': 'qpoint_grid'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:qpoint_grid': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f190>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'qpoint_gridType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:qpoint_gridType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f3d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f390>]
DEBUG: Return existing complex type 'neb:qpoint_gridType'
DEBUG: Add element 'neb:qpoint_grid' with path './input/engine/dft/hybrid/qpoint_grid'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutfock'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutfock': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f1d0>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutfock' with path './input/engine/dft/hybrid/ecutfock'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'exx_fraction'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:exx_fraction': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f210>
DEBUG: Children: []
DEBUG: Add element 'neb:exx_fraction' with path './input/engine/dft/hybrid/exx_fraction'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'screening_parameter'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:screening_parameter': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f250>
DEBUG: Children: []
DEBUG: Add element 'neb:screening_parameter' with path './input/engine/dft/hybrid/screening_parameter'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'exxdiv_treatment'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:exxdiv_treatment': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f290>
DEBUG: Children: []
DEBUG: Add element 'neb:exxdiv_treatment' with path './input/engine/dft/hybrid/exxdiv_treatment'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'x_gamma_extrapolation'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:x_gamma_extrapolation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f2d0>
DEBUG: Children: []
DEBUG: Add element 'neb:x_gamma_extrapolation' with path './input/engine/dft/hybrid/x_gamma_extrapolation'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutvcut'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutvcut': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f350>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutvcut' with path './input/engine/dft/hybrid/ecutvcut'
DEBUG: Return existing complex type 'neb:hybridType'
DEBUG: Add element 'neb:hybrid' with path './input/engine/dft/hybrid'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:dftUType', 'name': 'dftU', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:dftU': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1439d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dftUType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dftUType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f450>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c14f550>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'unsignedByte', 'name': 'lda_plus_u_kind', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:lda_plus_u_kind': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f5d0>
DEBUG: Children: []
DEBUG: Add element 'neb:lda_plus_u_kind' with path './input/engine/dft/dftU/lda_plus_u_kind'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_U', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_U': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f590>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_U' with path './input/engine/dft/dftU/Hubbard_U'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_J0', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_J0': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f650>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_J0' with path './input/engine/dft/dftU/Hubbard_J0'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_alpha', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_alpha': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f6d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_alpha' with path './input/engine/dft/dftU/Hubbard_alpha'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_beta', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_beta': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f750>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_beta' with path './input/engine/dft/dftU/Hubbard_beta'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardJType', 'name': 'Hubbard_J', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_J': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f7d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardJType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardJType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fa10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fa50>]
DEBUG: Return existing complex type 'neb:HubbardJType'
DEBUG: Add element 'neb:Hubbard_J' with path './input/engine/dft/dftU/Hubbard_J'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:starting_nsType', 'name': 'starting_ns', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:starting_ns': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f810>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'starting_nsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:starting_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fb90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fb50>]
DEBUG: Return existing complex type 'neb:starting_nsType'
DEBUG: Add element 'neb:starting_ns' with path './input/engine/dft/dftU/starting_ns'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:Hubbard_nsType', 'name': 'Hubbard_ns', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_ns': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f850>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'Hubbard_nsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:Hubbard_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fd10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fc90>]
DEBUG: Return existing complex type 'neb:Hubbard_nsType'
DEBUG: Add element 'neb:Hubbard_ns' with path './input/engine/dft/dftU/Hubbard_ns'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:HubbardProjType', 'name': 'U_projection_type', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:U_projection_type': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f890>
DEBUG: Children: []
DEBUG: Add element 'neb:U_projection_type' with path './input/engine/dft/dftU/U_projection_type'
DEBUG: Return existing complex type 'neb:dftUType'
DEBUG: Add element 'neb:dftU' with path './input/engine/dft/dftU'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:vdWType', 'name': 'vdW', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:vdW': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143a50>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'vdWType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:vdWType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c0d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'vdw_corr'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:vdw_corr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c110>
DEBUG: Children: []
DEBUG: Add element 'neb:vdw_corr' with path './input/engine/dft/vdW/vdw_corr'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'non_local_term', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:non_local_term': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c190>
DEBUG: Children: []
DEBUG: Add element 'neb:non_local_term' with path './input/engine/dft/vdW/non_local_term'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'london_s6', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:london_s6': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c150>
DEBUG: Children: []
DEBUG: Add element 'neb:london_s6' with path './input/engine/dft/vdW/london_s6'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'ts_vdw_econv_thr', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ts_vdw_econv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c1d0>
DEBUG: Children: []
DEBUG: Add element 'neb:ts_vdw_econv_thr' with path './input/engine/dft/vdW/ts_vdw_econv_thr'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'boolean', 'name': 'ts_vdw_isolated', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ts_vdw_isolated': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c250>
DEBUG: Children: []
DEBUG: Add element 'neb:ts_vdw_isolated' with path './input/engine/dft/vdW/ts_vdw_isolated'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'london_rcut', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:london_rcut': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c210>
DEBUG: Children: []
DEBUG: Add element 'neb:london_rcut' with path './input/engine/dft/vdW/london_rcut'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'xdm_a1', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:xdm_a1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c290>
DEBUG: Children: []
DEBUG: Add element 'neb:xdm_a1' with path './input/engine/dft/vdW/xdm_a1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'xdm_a2', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:xdm_a2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c2d0>
DEBUG: Children: []
DEBUG: Add element 'neb:xdm_a2' with path './input/engine/dft/vdW/xdm_a2'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'london_c6', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:london_c6': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c310>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:london_c6' with path './input/engine/dft/vdW/london_c6'
DEBUG: Return existing complex type 'neb:vdWType'
DEBUG: Add element 'neb:vdW' with path './input/engine/dft/vdW'
DEBUG: Return existing complex type 'neb:dftType'
DEBUG: Add element 'neb:dft' with path './input/engine/dft'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:spinType', 'name': 'spin'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2310>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'spinType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:spinType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c3d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'lsda'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:lsda': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c410>
DEBUG: Children: []
DEBUG: Add element 'neb:lsda' with path './input/engine/spin/lsda'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'noncolin'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:noncolin': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c450>
DEBUG: Children: []
DEBUG: Add element 'neb:noncolin' with path './input/engine/spin/noncolin'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'spinorbit'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spinorbit': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c490>
DEBUG: Children: []
DEBUG: Add element 'neb:spinorbit' with path './input/engine/spin/spinorbit'
DEBUG: Return existing complex type 'neb:spinType'
DEBUG: Add element 'neb:spin' with path './input/engine/spin'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:bandsType', 'name': 'bands'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:bands': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2350>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'bandsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:bandsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c4d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c510>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nbnd', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nbnd': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c590>
DEBUG: Children: []
DEBUG: Add element 'neb:nbnd' with path './input/engine/bands/nbnd'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:smearingType', 'name': 'smearing', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:smearing': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c550>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'smearingType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:smearingType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c710>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c15c750>]
DEBUG: Return existing complex type 'neb:smearingType'
DEBUG: Add element 'neb:smearing' with path './input/engine/bands/smearing'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tot_charge', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tot_charge': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c5d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tot_charge' with path './input/engine/bands/tot_charge'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tot_magnetization', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tot_magnetization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c610>
DEBUG: Children: []
DEBUG: Add element 'neb:tot_magnetization' with path './input/engine/bands/tot_magnetization'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:occupationsType', 'name': 'occupations'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:occupations': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c650>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'occupationsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:occupationsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15ca10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c15c9d0>]
DEBUG: Return existing complex type 'neb:occupationsType'
DEBUG: Add element 'neb:occupations' with path './input/engine/bands/occupations'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '2', 'type': 'neb:inputOccupationsType', 'name': 'inputOccupations', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:inputOccupations': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c690>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'inputOccupationsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:inputOccupationsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c101f50>]
DEBUG: Return existing complex type 'neb:inputOccupationsType'
DEBUG: Add element 'neb:inputOccupations' with path './input/engine/bands/inputOccupations'
DEBUG: Return existing complex type 'neb:bandsType'
DEBUG: Add element 'neb:bands' with path './input/engine/bands'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisType', 'name': 'basis'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:basis': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2390>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15ca90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15cb10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'gamma_only', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:gamma_only': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cb50>
DEBUG: Children: []
DEBUG: Add element 'neb:gamma_only' with path './input/engine/basis/gamma_only'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutwfc'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutwfc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cb90>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutwfc' with path './input/engine/basis/ecutwfc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutrho', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutrho': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cbd0>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutrho' with path './input/engine/basis/ecutrho'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisSetItemType', 'name': 'fft_grid', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fft_grid': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cc10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Return existing complex type 'neb:basisSetItemType'
DEBUG: Add element 'neb:fft_grid' with path './input/engine/basis/fft_grid'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisSetItemType', 'name': 'fft_smooth', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fft_smooth': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cc90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Return existing complex type 'neb:basisSetItemType'
DEBUG: Add element 'neb:fft_smooth' with path './input/engine/basis/fft_smooth'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisSetItemType', 'name': 'fft_box', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fft_box': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cd10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Return existing complex type 'neb:basisSetItemType'
DEBUG: Add element 'neb:fft_box' with path './input/engine/basis/fft_box'
DEBUG: Return existing complex type 'neb:basisType'
DEBUG: Add element 'neb:basis' with path './input/engine/basis'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:electron_controlType', 'name': 'electron_control'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electron_control': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d23d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electron_controlType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electron_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1674d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c167550>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:diagoType', 'name': 'diagonalization'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diagonalization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1675d0>
DEBUG: Children: []
DEBUG: Add element 'neb:diagonalization' with path './input/engine/electron_control/diagonalization'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:mixingModeType', 'name': 'mixing_mode'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mixing_mode': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167590>
DEBUG: Children: []
DEBUG: Add element 'neb:mixing_mode' with path './input/engine/electron_control/mixing_mode'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'mixing_beta'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mixing_beta': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167610>
DEBUG: Children: []
DEBUG: Add element 'neb:mixing_beta' with path './input/engine/electron_control/mixing_beta'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167650>
DEBUG: Children: []
DEBUG: Add element 'neb:conv_thr' with path './input/engine/electron_control/conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'mixing_ndim'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mixing_ndim': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1676d0>
DEBUG: Children: []
DEBUG: Add element 'neb:mixing_ndim' with path './input/engine/electron_control/mixing_ndim'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'max_nstep'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:max_nstep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167710>
DEBUG: Children: []
DEBUG: Add element 'neb:max_nstep' with path './input/engine/electron_control/max_nstep'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'real_space_q'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:real_space_q': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167690>
DEBUG: Children: []
DEBUG: Add element 'neb:real_space_q' with path './input/engine/electron_control/real_space_q'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'tq_smoothing'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tq_smoothing': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167750>
DEBUG: Children: []
DEBUG: Add element 'neb:tq_smoothing' with path './input/engine/electron_control/tq_smoothing'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'tbeta_smoothing'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tbeta_smoothing': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1677d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tbeta_smoothing' with path './input/engine/electron_control/tbeta_smoothing'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'diago_thr_init'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diago_thr_init': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167810>
DEBUG: Children: []
DEBUG: Add element 'neb:diago_thr_init' with path './input/engine/electron_control/diago_thr_init'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'diago_full_acc'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diago_full_acc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167850>
DEBUG: Children: []
DEBUG: Add element 'neb:diago_full_acc' with path './input/engine/electron_control/diago_full_acc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'nonNegativeInteger', 'name': 'diago_cg_maxiter'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diago_cg_maxiter': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167790>
DEBUG: Children: []
DEBUG: Add element 'neb:diago_cg_maxiter' with path './input/engine/electron_control/diago_cg_maxiter'
DEBUG: Return existing complex type 'neb:electron_controlType'
DEBUG: Add element 'neb:electron_control' with path './input/engine/electron_control'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:k_points_IBZType', 'name': 'k_points_IBZ'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:k_points_IBZ': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2450>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'k_points_IBZType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:k_points_IBZType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167ad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}choice' at 0x7f2e8c167b10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={'maxOccurs': '1', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:monkhorst_packType', 'name': 'monkhorst_pack', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:monkhorst_pack': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167b90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'monkhorst_packType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:monkhorst_packType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167c10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167cd0>]
DEBUG: Return existing complex type 'neb:monkhorst_packType'
DEBUG: Add element 'neb:monkhorst_pack' with path './input/engine/k_points_IBZ/monkhorst_pack'
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nk', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nk': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167c50>
DEBUG: Children: []
DEBUG: Add element 'neb:nk' with path './input/engine/k_points_IBZ/nk'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:k_pointType', 'name': 'k_point', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:k_point': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167c90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'k_pointType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:k_pointType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167f10>]
DEBUG: Return existing complex type 'neb:k_pointType'
DEBUG: Add element 'neb:k_point' with path './input/engine/k_points_IBZ/k_point'
DEBUG: Return existing complex type 'neb:k_points_IBZType'
DEBUG: Add element 'neb:k_points_IBZ' with path './input/engine/k_points_IBZ'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:ion_controlType', 'name': 'ion_control'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ion_control': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d24d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ion_controlType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ion_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4050>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'ion_dynamics'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ion_dynamics': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f40d0>
DEBUG: Children: []
DEBUG: Add element 'neb:ion_dynamics' with path './input/engine/ion_control/ion_dynamics'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'upscale', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:upscale': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4110>
DEBUG: Children: []
DEBUG: Add element 'neb:upscale' with path './input/engine/ion_control/upscale'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'remove_rigid_rot', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:remove_rigid_rot': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4150>
DEBUG: Children: []
DEBUG: Add element 'neb:remove_rigid_rot' with path './input/engine/ion_control/remove_rigid_rot'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'refold_pos', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:refold_pos': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4190>
DEBUG: Children: []
DEBUG: Add element 'neb:refold_pos' with path './input/engine/ion_control/refold_pos'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:bfgsType', 'name': 'bfgs', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:bfgs': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f41d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'bfgsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:bfgsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4250>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4290>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ndim'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ndim': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4310>
DEBUG: Children: []
DEBUG: Add element 'neb:ndim' with path './input/engine/ion_control/bfgs/ndim'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'trust_radius_min'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:trust_radius_min': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f42d0>
DEBUG: Children: []
DEBUG: Add element 'neb:trust_radius_min' with path './input/engine/ion_control/bfgs/trust_radius_min'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'trust_radius_max'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:trust_radius_max': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4350>
DEBUG: Children: []
DEBUG: Add element 'neb:trust_radius_max' with path './input/engine/ion_control/bfgs/trust_radius_max'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'trust_radius_init'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:trust_radius_init': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4390>
DEBUG: Children: []
DEBUG: Add element 'neb:trust_radius_init' with path './input/engine/ion_control/bfgs/trust_radius_init'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'w1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:w1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f43d0>
DEBUG: Children: []
DEBUG: Add element 'neb:w1' with path './input/engine/ion_control/bfgs/w1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'w2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:w2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4410>
DEBUG: Children: []
DEBUG: Add element 'neb:w2' with path './input/engine/ion_control/bfgs/w2'
DEBUG: Return existing complex type 'neb:bfgsType'
DEBUG: Add element 'neb:bfgs' with path './input/engine/ion_control/bfgs'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:mdType', 'name': 'md', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:md': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4210>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'mdType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:mdType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4450>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4490>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'pot_extrapolation'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pot_extrapolation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f44d0>
DEBUG: Children: []
DEBUG: Add element 'neb:pot_extrapolation' with path './input/engine/ion_control/md/pot_extrapolation'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'wfc_extrapolation'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wfc_extrapolation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4510>
DEBUG: Children: []
DEBUG: Add element 'neb:wfc_extrapolation' with path './input/engine/ion_control/md/wfc_extrapolation'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'ion_temperature'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ion_temperature': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4590>
DEBUG: Children: []
DEBUG: Add element 'neb:ion_temperature' with path './input/engine/ion_control/md/ion_temperature'
DEBUG: xsd_element_factory: elem.attrib={'default': '20.0', 'maxOccurs': '1', 'type': 'double', 'name': 'timestep'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:timestep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4550>
DEBUG: Children: []
DEBUG: Add element 'neb:timestep' with path './input/engine/ion_control/md/timestep'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tempw'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tempw': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f45d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tempw' with path './input/engine/ion_control/md/tempw'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tolp'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tolp': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4610>
DEBUG: Children: []
DEBUG: Add element 'neb:tolp' with path './input/engine/ion_control/md/tolp'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'deltaT'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:deltaT': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4650>
DEBUG: Children: []
DEBUG: Add element 'neb:deltaT' with path './input/engine/ion_control/md/deltaT'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nraise'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nraise': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f46d0>
DEBUG: Children: []
DEBUG: Add element 'neb:nraise' with path './input/engine/ion_control/md/nraise'
DEBUG: Return existing complex type 'neb:mdType'
DEBUG: Add element 'neb:md' with path './input/engine/ion_control/md'
DEBUG: Return existing complex type 'neb:ion_controlType'
DEBUG: Add element 'neb:ion_control' with path './input/engine/ion_control'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:cell_controlType', 'name': 'cell_control'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell_control': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2510>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cell_controlType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cell_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4690>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4710>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'cell_dynamics'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell_dynamics': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4750>
DEBUG: Children: []
DEBUG: Add element 'neb:cell_dynamics' with path './input/engine/cell_control/cell_dynamics'
DEBUG: xsd_element_factory: elem.attrib={'default': '0.0', 'type': 'double', 'name': 'pressure'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pressure': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4790>
DEBUG: Children: []
DEBUG: Add element 'neb:pressure' with path './input/engine/cell_control/pressure'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'wmass', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wmass': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f47d0>
DEBUG: Children: []
DEBUG: Add element 'neb:wmass' with path './input/engine/cell_control/wmass'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'cell_factor', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell_factor': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4810>
DEBUG: Children: []
DEBUG: Add element 'neb:cell_factor' with path './input/engine/cell_control/cell_factor'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'fix_volume', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fix_volume': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4850>
DEBUG: Children: []
DEBUG: Add element 'neb:fix_volume' with path './input/engine/cell_control/fix_volume'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'fix_area', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fix_area': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4890>
DEBUG: Children: []
DEBUG: Add element 'neb:fix_area' with path './input/engine/cell_control/fix_area'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'isotropic', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:isotropic': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f48d0>
DEBUG: Children: []
DEBUG: Add element 'neb:isotropic' with path './input/engine/cell_control/isotropic'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:integerMatrixType', 'name': 'free_cell', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:free_cell': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4910>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'integerMatrixType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:integerMatrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121f10>]
DEBUG: Return existing complex type 'neb:integerMatrixType'
DEBUG: Add element 'neb:free_cell' with path './input/engine/cell_control/free_cell'
DEBUG: Return existing complex type 'neb:cell_controlType'
DEBUG: Add element 'neb:cell_control' with path './input/engine/cell_control'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:symmetry_flagsType', 'name': 'symmetry_flags', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:symmetry_flags': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d25d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'symmetry_flagsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:symmetry_flagsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f49d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'nosym'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nosym': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4a10>
DEBUG: Children: []
DEBUG: Add element 'neb:nosym' with path './input/engine/symmetry_flags/nosym'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'nosym_evc'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nosym_evc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4a50>
DEBUG: Children: []
DEBUG: Add element 'neb:nosym_evc' with path './input/engine/symmetry_flags/nosym_evc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'noinv'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:noinv': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4a90>
DEBUG: Children: []
DEBUG: Add element 'neb:noinv' with path './input/engine/symmetry_flags/noinv'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'no_t_rev'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:no_t_rev': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4ad0>
DEBUG: Children: []
DEBUG: Add element 'neb:no_t_rev' with path './input/engine/symmetry_flags/no_t_rev'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'force_symmorphic'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:force_symmorphic': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4b10>
DEBUG: Children: []
DEBUG: Add element 'neb:force_symmorphic' with path './input/engine/symmetry_flags/force_symmorphic'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'use_all_frac'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:use_all_frac': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4b50>
DEBUG: Children: []
DEBUG: Add element 'neb:use_all_frac' with path './input/engine/symmetry_flags/use_all_frac'
DEBUG: Return existing complex type 'neb:symmetry_flagsType'
DEBUG: Add element 'neb:symmetry_flags' with path './input/engine/symmetry_flags'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:boundary_conditionsType', 'name': 'boundary_conditions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:boundary_conditions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2590>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'boundary_conditionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:boundary_conditionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4b90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4c10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'assume_isolated'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:assume_isolated': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4c90>
DEBUG: Children: []
DEBUG: Add element 'neb:assume_isolated' with path './input/engine/boundary_conditions/assume_isolated'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:esmType', 'name': 'esm', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:esm': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4c50>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'esmType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:esmType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4d50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4d90>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'bc'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:bc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4dd0>
DEBUG: Children: []
DEBUG: Add element 'neb:bc' with path './input/engine/boundary_conditions/esm/bc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nfit'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nfit': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4e50>
DEBUG: Children: []
DEBUG: Add element 'neb:nfit' with path './input/engine/boundary_conditions/esm/nfit'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'w'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:w': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4e10>
DEBUG: Children: []
DEBUG: Add element 'neb:w' with path './input/engine/boundary_conditions/esm/w'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'efield'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:efield': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4e90>
DEBUG: Children: []
DEBUG: Add element 'neb:efield' with path './input/engine/boundary_conditions/esm/efield'
DEBUG: Return existing complex type 'neb:esmType'
DEBUG: Add element 'neb:esm' with path './input/engine/boundary_conditions/esm'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'fcp_opt', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fcp_opt': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4cd0>
DEBUG: Children: []
DEBUG: Add element 'neb:fcp_opt' with path './input/engine/boundary_conditions/fcp_opt'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'fcp_mu', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fcp_mu': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4d10>
DEBUG: Children: []
DEBUG: Add element 'neb:fcp_mu' with path './input/engine/boundary_conditions/fcp_mu'
DEBUG: Return existing complex type 'neb:boundary_conditionsType'
DEBUG: Add element 'neb:boundary_conditions' with path './input/engine/boundary_conditions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:ekin_functionalType', 'name': 'ekin_functional', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ekin_functional': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d26d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ekin_functionalType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ekin_functionalType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4f10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecfixed'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecfixed': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4f50>
DEBUG: Children: []
DEBUG: Add element 'neb:ecfixed' with path './input/engine/ekin_functional/ecfixed'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'qcutz'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:qcutz': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4f90>
DEBUG: Children: []
DEBUG: Add element 'neb:qcutz' with path './input/engine/ekin_functional/qcutz'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'q2sigma'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:q2sigma': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4fd0>
DEBUG: Children: []
DEBUG: Add element 'neb:q2sigma' with path './input/engine/ekin_functional/q2sigma'
DEBUG: Return existing complex type 'neb:ekin_functionalType'
DEBUG: Add element 'neb:ekin_functional' with path './input/engine/ekin_functional'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'external_atomic_forces', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:external_atomic_forces': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2750>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:external_atomic_forces' with path './input/engine/external_atomic_forces'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'free_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:free_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2810>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:free_positions' with path './input/engine/free_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'starting_atomic_velocities', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:starting_atomic_velocities': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d27d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:starting_atomic_velocities' with path './input/engine/starting_atomic_velocities'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:electric_fieldType', 'name': 'electric_field', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2890>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electric_fieldType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electric_fieldType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101210>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101250>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:electric_potentialType', 'name': 'electric_potential', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_potential': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101290>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_potential' with path './input/engine/electric_field/electric_potential'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'default': 'false', 'type': 'boolean', 'name': 'dipole_correction', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:dipole_correction': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101310>
DEBUG: Children: []
DEBUG: Add element 'neb:dipole_correction' with path './input/engine/electric_field/dipole_correction'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'electric_field_direction', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field_direction': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101350>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_field_direction' with path './input/engine/electric_field/electric_field_direction'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'potential_max_position', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:potential_max_position': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1013d0>
DEBUG: Children: []
DEBUG: Add element 'neb:potential_max_position' with path './input/engine/electric_field/potential_max_position'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'potential_decrease_width', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:potential_decrease_width': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101450>
DEBUG: Children: []
DEBUG: Add element 'neb:potential_decrease_width' with path './input/engine/electric_field/potential_decrease_width'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'electric_field_amplitude', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field_amplitude': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1014d0>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_field_amplitude' with path './input/engine/electric_field/electric_field_amplitude'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:d3vectorType', 'name': 'electric_field_vector', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field_vector': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101550>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_field_vector' with path './input/engine/electric_field/electric_field_vector'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'nk_per_string', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nk_per_string': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1015d0>
DEBUG: Children: []
DEBUG: Add element 'neb:nk_per_string' with path './input/engine/electric_field/nk_per_string'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'n_berry_cycles', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:n_berry_cycles': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101650>
DEBUG: Children: []
DEBUG: Add element 'neb:n_berry_cycles' with path './input/engine/electric_field/n_berry_cycles'
DEBUG: Return existing complex type 'neb:electric_fieldType'
DEBUG: Add element 'neb:electric_field' with path './input/engine/electric_field'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_constraintsType', 'name': 'atomic_constraints', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2690>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_constraintsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_constraintsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1017d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101850>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'num_of_constraints', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:num_of_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101890>
DEBUG: Children: []
DEBUG: Add element 'neb:num_of_constraints' with path './input/engine/atomic_constraints/num_of_constraints'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'tolerance', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tolerance': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1018d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tolerance' with path './input/engine/atomic_constraints/tolerance'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomic_constraintType', 'name': 'atomic_constraint', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_constraint': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101910>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_constraintType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_constraintType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101a10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:constr_parms_listType', 'name': 'constr_parms'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constr_parms': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101a50>
DEBUG: Children: []
DEBUG: Add element 'neb:constr_parms' with path './input/engine/atomic_constraints/atomic_constraint/constr_parms'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:constr_typeType', 'name': 'constr_type'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constr_type': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101ad0>
DEBUG: Children: []
DEBUG: Add element 'neb:constr_type' with path './input/engine/atomic_constraints/atomic_constraint/constr_type'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'constr_target'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constr_target': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101b10>
DEBUG: Children: []
DEBUG: Add element 'neb:constr_target' with path './input/engine/atomic_constraints/atomic_constraint/constr_target'
DEBUG: Return existing complex type 'neb:atomic_constraintType'
DEBUG: Add element 'neb:atomic_constraint' with path './input/engine/atomic_constraints/atomic_constraint'
DEBUG: Return existing complex type 'neb:atomic_constraintsType'
DEBUG: Add element 'neb:atomic_constraints' with path './input/engine/atomic_constraints'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:spin_constraintsType', 'name': 'spin_constraints', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2950>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'spin_constraintsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:spin_constraintsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101050>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1010d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'spin_constraints'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101110>
DEBUG: Children: []
DEBUG: Add element 'neb:spin_constraints' with path './input/engine/spin_constraints/spin_constraints'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'lagrange_multiplier'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:lagrange_multiplier': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101150>
DEBUG: Children: []
DEBUG: Add element 'neb:lagrange_multiplier' with path './input/engine/spin_constraints/lagrange_multiplier'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:d3vectorType', 'name': 'target_magnetization', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:target_magnetization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101190>
DEBUG: Children: []
DEBUG: Add element 'neb:target_magnetization' with path './input/engine/spin_constraints/target_magnetization'
DEBUG: Return existing complex type 'neb:spin_constraintsType'
DEBUG: Add element 'neb:spin_constraints' with path './input/engine/spin_constraints'
DEBUG: Return existing complex type 'neb:engineInputType'
DEBUG: Add element 'neb:engine' with path './input/engine'
DEBUG: Return existing complex type 'neb:nebInputType'
DEBUG: Add element 'neb:input' with path './input'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:nebStepType', 'name': 'nebStep', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nebStep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5650>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebStepType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebStepType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d29d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2a10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'Iteration'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Iteration': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2a90>
DEBUG: Children: []
DEBUG: Add element 'neb:Iteration' with path './nebStep/Iteration'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ActivationEnergyForward'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ActivationEnergyForward': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2a50>
DEBUG: Children: []
DEBUG: Add element 'neb:ActivationEnergyForward' with path './nebStep/ActivationEnergyForward'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ActivationEnergyBack'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ActivationEnergyBack': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2b10>
DEBUG: Children: []
DEBUG: Add element 'neb:ActivationEnergyBack' with path './nebStep/ActivationEnergyBack'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:nebBeadType', 'name': 'Bead'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Bead': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2bd0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebBeadType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebBeadType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2f90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dc090>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ImageIndex'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ImageIndex': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc110>
DEBUG: Children: []
DEBUG: Add element 'neb:ImageIndex' with path './nebStep/Bead/ImageIndex'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'Energy'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Energy': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc0d0>
DEBUG: Children: []
DEBUG: Add element 'neb:Energy' with path './nebStep/Bead/Energy'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'Error'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Error': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc150>
DEBUG: Children: []
DEBUG: Add element 'neb:Error' with path './nebStep/Bead/Error'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'FrozenFlag'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:FrozenFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc190>
DEBUG: Children: []
DEBUG: Add element 'neb:FrozenFlag' with path './nebStep/Bead/FrozenFlag'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_structureType', 'name': 'Structure'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Structure': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc1d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_structureType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_structureType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1430d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143150>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143350>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143310>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c1433d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_group_factory: elem.attrib={'maxOccurs': '1', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_positionsType', 'name': 'atomic_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1431d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_positionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143450>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143490>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './nebStep/Bead/Structure/atomic_positions/atom'
DEBUG: Return existing complex type 'neb:atomic_positionsType'
DEBUG: Add element 'neb:atomic_positions' with path './nebStep/Bead/Structure/atomic_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:wyckoff_positionsType', 'name': 'wyckoff_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wyckoff_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143250>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'wyckoff_positionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:wyckoff_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1436d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143750>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143790>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143710>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './nebStep/Bead/Structure/wyckoff_positions/atom'
DEBUG: Return existing complex type 'neb:wyckoff_positionsType'
DEBUG: Add element 'neb:wyckoff_positions' with path './nebStep/Bead/Structure/wyckoff_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:cellType', 'name': 'cell'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1432d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cellType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cellType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1437d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143810>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143850>
DEBUG: Children: []
DEBUG: Add element 'neb:a1' with path './nebStep/Bead/Structure/cell/a1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143890>
DEBUG: Children: []
DEBUG: Add element 'neb:a2' with path './nebStep/Bead/Structure/cell/a2'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a3'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a3': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1438d0>
DEBUG: Children: []
DEBUG: Add element 'neb:a3' with path './nebStep/Bead/Structure/cell/a3'
DEBUG: Return existing complex type 'neb:cellType'
DEBUG: Add element 'neb:cell' with path './nebStep/Bead/Structure/cell'
DEBUG: Return existing complex type 'neb:atomic_structureType'
DEBUG: Add element 'neb:Structure' with path './nebStep/Bead/Structure'
DEBUG: Return existing complex type 'neb:nebBeadType'
DEBUG: Add element 'neb:Bead' with path './nebStep/Bead'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'pathLength'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pathLength': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2b90>
DEBUG: Children: []
DEBUG: Add element 'neb:pathLength' with path './nebStep/pathLength'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'InterBeadDistance'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:InterBeadDistance': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2c10>
DEBUG: Children: []
DEBUG: Add element 'neb:InterBeadDistance' with path './nebStep/InterBeadDistance'
DEBUG: Return existing complex type 'neb:nebStepType'
DEBUG: Add element 'neb:nebStep' with path './nebStep'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:nebOutputType', 'name': 'nebOutput', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nebOutput': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5610>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebOutputType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebOutputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2c50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2c90>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:nebStepType', 'name': 'finalNebStep'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:finalNebStep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2d10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebStepType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebStepType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d29d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2a10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'Iteration'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Iteration': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2a90>
DEBUG: Children: []
DEBUG: Add element 'neb:Iteration' with path './nebOutput/finalNebStep/Iteration'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ActivationEnergyForward'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ActivationEnergyForward': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2a50>
DEBUG: Children: []
DEBUG: Add element 'neb:ActivationEnergyForward' with path './nebOutput/finalNebStep/ActivationEnergyForward'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ActivationEnergyBack'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ActivationEnergyBack': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2b10>
DEBUG: Children: []
DEBUG: Add element 'neb:ActivationEnergyBack' with path './nebOutput/finalNebStep/ActivationEnergyBack'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:nebBeadType', 'name': 'Bead'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Bead': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2bd0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'nebBeadType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:nebBeadType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2f90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5dc090>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ImageIndex'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ImageIndex': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc110>
DEBUG: Children: []
DEBUG: Add element 'neb:ImageIndex' with path './nebOutput/finalNebStep/Bead/ImageIndex'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'Energy'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Energy': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc0d0>
DEBUG: Children: []
DEBUG: Add element 'neb:Energy' with path './nebOutput/finalNebStep/Bead/Energy'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'Error'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Error': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc150>
DEBUG: Children: []
DEBUG: Add element 'neb:Error' with path './nebOutput/finalNebStep/Bead/Error'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'FrozenFlag'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:FrozenFlag': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc190>
DEBUG: Children: []
DEBUG: Add element 'neb:FrozenFlag' with path './nebOutput/finalNebStep/Bead/FrozenFlag'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_structureType', 'name': 'Structure'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Structure': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc1d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_structureType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_structureType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1430d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143150>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143350>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143310>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c1433d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_group_factory: elem.attrib={'maxOccurs': '1', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_positionsType', 'name': 'atomic_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1431d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_positionsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143450>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143490>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './nebOutput/finalNebStep/Bead/Structure/atomic_positions/atom'
DEBUG: Return existing complex type 'neb:atomic_positionsType'
DEBUG: Add element 'neb:atomic_positions' with path './nebOutput/finalNebStep/Bead/Structure/atomic_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:wyckoff_positionsType', 'name': 'wyckoff_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wyckoff_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143250>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'wyckoff_positionsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:wyckoff_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1436d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143750>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143790>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143710>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './nebOutput/finalNebStep/Bead/Structure/wyckoff_positions/atom'
DEBUG: Return existing complex type 'neb:wyckoff_positionsType'
DEBUG: Add element 'neb:wyckoff_positions' with path './nebOutput/finalNebStep/Bead/Structure/wyckoff_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:cellType', 'name': 'cell'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1432d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cellType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cellType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1437d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143810>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143850>
DEBUG: Children: []
DEBUG: Add element 'neb:a1' with path './nebOutput/finalNebStep/Bead/Structure/cell/a1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a2'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143890>
DEBUG: Children: []
DEBUG: Add element 'neb:a2' with path './nebOutput/finalNebStep/Bead/Structure/cell/a2'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a3'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a3': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1438d0>
DEBUG: Children: []
DEBUG: Add element 'neb:a3' with path './nebOutput/finalNebStep/Bead/Structure/cell/a3'
DEBUG: Return existing complex type 'neb:cellType'
DEBUG: Add element 'neb:cell' with path './nebOutput/finalNebStep/Bead/Structure/cell'
DEBUG: Return existing complex type 'neb:atomic_structureType'
DEBUG: Add element 'neb:Structure' with path './nebOutput/finalNebStep/Bead/Structure'
DEBUG: Return existing complex type 'neb:nebBeadType'
DEBUG: Add element 'neb:Bead' with path './nebOutput/finalNebStep/Bead'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'pathLength'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pathLength': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2b90>
DEBUG: Children: []
DEBUG: Add element 'neb:pathLength' with path './nebOutput/finalNebStep/pathLength'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'InterBeadDistance'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:InterBeadDistance': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2c10>
DEBUG: Children: []
DEBUG: Add element 'neb:InterBeadDistance' with path './nebOutput/finalNebStep/InterBeadDistance'
DEBUG: Return existing complex type 'neb:nebStepType'
DEBUG: Add element 'neb:finalNebStep' with path './nebOutput/finalNebStep'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:engineInputType', 'name': 'nebControl'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nebControl': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2cd0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'engineInputType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:engineInputType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2110>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2090>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:control_variablesType', 'name': 'control_variables'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:control_variables': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2150>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'control_variablesType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:control_variablesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5e7f50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137050>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'title'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:title': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137090>
DEBUG: Children: []
DEBUG: Add element 'neb:title' with path './nebOutput/nebControl/control_variables/title'
DEBUG: xsd_element_factory: elem.attrib={'default': 'scf', 'type': 'neb:calculationType', 'name': 'calculation'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:calculation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1370d0>
DEBUG: Children: []
DEBUG: Add element 'neb:calculation' with path './nebOutput/nebControl/control_variables/calculation'
DEBUG: xsd_element_factory: elem.attrib={'default': 'from_scratch', 'type': 'neb:controlRestartModeType', 'name': 'restart_mode'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:restart_mode': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137110>
DEBUG: Children: []
DEBUG: Add element 'neb:restart_mode' with path './nebOutput/nebControl/control_variables/restart_mode'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'prefix'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:prefix': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137190>
DEBUG: Children: []
DEBUG: Add element 'neb:prefix' with path './nebOutput/nebControl/control_variables/prefix'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'pseudo_dir'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pseudo_dir': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1371d0>
DEBUG: Children: []
DEBUG: Add element 'neb:pseudo_dir' with path './nebOutput/nebControl/control_variables/pseudo_dir'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'outdir'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:outdir': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137210>
DEBUG: Children: []
DEBUG: Add element 'neb:outdir' with path './nebOutput/nebControl/control_variables/outdir'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'stress'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:stress': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137250>
DEBUG: Children: []
DEBUG: Add element 'neb:stress' with path './nebOutput/nebControl/control_variables/stress'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'forces'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:forces': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137290>
DEBUG: Children: []
DEBUG: Add element 'neb:forces' with path './nebOutput/nebControl/control_variables/forces'
DEBUG: xsd_element_factory: elem.attrib={'default': 'false', 'type': 'boolean', 'name': 'wf_collect'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wf_collect': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1372d0>
DEBUG: Children: []
DEBUG: Add element 'neb:wf_collect' with path './nebOutput/nebControl/control_variables/wf_collect'
DEBUG: xsd_element_factory: elem.attrib={'default': 'low', 'type': 'neb:lowhighType', 'name': 'disk_io'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:disk_io': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137350>
DEBUG: Children: []
DEBUG: Add element 'neb:disk_io' with path './nebOutput/nebControl/control_variables/disk_io'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'max_seconds'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:max_seconds': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137390>
DEBUG: Children: []
DEBUG: Add element 'neb:max_seconds' with path './nebOutput/nebControl/control_variables/max_seconds'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nstep', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nstep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1373d0>
DEBUG: Children: []
DEBUG: Add element 'neb:nstep' with path './nebOutput/nebControl/control_variables/nstep'
DEBUG: xsd_element_factory: elem.attrib={'default': '1.0e-5', 'type': 'double', 'name': 'etot_conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:etot_conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137310>
DEBUG: Children: []
DEBUG: Add element 'neb:etot_conv_thr' with path './nebOutput/nebControl/control_variables/etot_conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'default': '1.0e-3', 'type': 'double', 'name': 'forc_conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:forc_conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137410>
DEBUG: Children: []
DEBUG: Add element 'neb:forc_conv_thr' with path './nebOutput/nebControl/control_variables/forc_conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'default': '5e-1', 'type': 'double', 'name': 'press_conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:press_conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137490>
DEBUG: Children: []
DEBUG: Add element 'neb:press_conv_thr' with path './nebOutput/nebControl/control_variables/press_conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'default': 'low', 'type': 'neb:lowhighType', 'name': 'verbosity'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:verbosity': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1374d0>
DEBUG: Children: []
DEBUG: Add element 'neb:verbosity' with path './nebOutput/nebControl/control_variables/verbosity'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'print_every'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:print_every': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137510>
DEBUG: Children: []
DEBUG: Add element 'neb:print_every' with path './nebOutput/nebControl/control_variables/print_every'
DEBUG: Return existing complex type 'neb:control_variablesType'
DEBUG: Add element 'neb:control_variables' with path './nebOutput/nebControl/control_variables'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_speciesType', 'name': 'atomic_species'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_species': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2210>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_speciesType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_speciesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137d50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137d90>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c137e50>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:speciesType', 'name': 'species'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:species': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137e10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'speciesType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:speciesType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c137dd0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c137e90>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143090>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'mass', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mass': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137ed0>
DEBUG: Children: []
DEBUG: Add element 'neb:mass' with path './nebOutput/nebControl/atomic_species/species/mass'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'pseudo_file'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pseudo_file': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137f10>
DEBUG: Children: []
DEBUG: Add element 'neb:pseudo_file' with path './nebOutput/nebControl/atomic_species/species/pseudo_file'
DEBUG: xsd_element_factory: elem.attrib={'default': '0.0', 'type': 'double', 'name': 'starting_magnetization', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:starting_magnetization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137f50>
DEBUG: Children: []
DEBUG: Add element 'neb:starting_magnetization' with path './nebOutput/nebControl/atomic_species/species/starting_magnetization'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'spin_teta', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_teta': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c137fd0>
DEBUG: Children: []
DEBUG: Add element 'neb:spin_teta' with path './nebOutput/nebControl/atomic_species/species/spin_teta'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'spin_phi', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_phi': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143050>
DEBUG: Children: []
DEBUG: Add element 'neb:spin_phi' with path './nebOutput/nebControl/atomic_species/species/spin_phi'
DEBUG: Return existing complex type 'neb:speciesType'
DEBUG: Add element 'neb:species' with path './nebOutput/nebControl/atomic_species/species'
DEBUG: Return existing complex type 'neb:atomic_speciesType'
DEBUG: Add element 'neb:atomic_species' with path './nebOutput/nebControl/atomic_species'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomic_structureType', 'name': 'atomic_structure', 'minOccurs': '2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_structure': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d21d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_structureType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_structureType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1430d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143150>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143350>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143310>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c1433d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_group_factory: elem.attrib={'maxOccurs': '1', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_positionsType', 'name': 'atomic_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1431d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_positionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143450>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143490>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './nebOutput/nebControl/atomic_structure/atomic_positions/atom'
DEBUG: Return existing complex type 'neb:atomic_positionsType'
DEBUG: Add element 'neb:atomic_positions' with path './nebOutput/nebControl/atomic_structure/atomic_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:wyckoff_positionsType', 'name': 'wyckoff_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wyckoff_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143250>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'wyckoff_positionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:wyckoff_positionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143610>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1436d0>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143750>, <Element '{http://www.w3.org/2001/XMLSchema}attribute' at 0x7f2e8c143790>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomType', 'name': 'atom'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atom': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143710>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1434d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c143510>]
DEBUG: Return existing complex type 'neb:atomType'
DEBUG: Add element 'neb:atom' with path './nebOutput/nebControl/atomic_structure/wyckoff_positions/atom'
DEBUG: Return existing complex type 'neb:wyckoff_positionsType'
DEBUG: Add element 'neb:wyckoff_positions' with path './nebOutput/nebControl/atomic_structure/wyckoff_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:cellType', 'name': 'cell'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1432d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cellType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cellType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1437d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143810>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143850>
DEBUG: Children: []
DEBUG: Add element 'neb:a1' with path './nebOutput/nebControl/atomic_structure/cell/a1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143890>
DEBUG: Children: []
DEBUG: Add element 'neb:a2' with path './nebOutput/nebControl/atomic_structure/cell/a2'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:d3vectorType', 'name': 'a3'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:a3': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1438d0>
DEBUG: Children: []
DEBUG: Add element 'neb:a3' with path './nebOutput/nebControl/atomic_structure/cell/a3'
DEBUG: Return existing complex type 'neb:cellType'
DEBUG: Add element 'neb:cell' with path './nebOutput/nebControl/atomic_structure/cell'
DEBUG: Return existing complex type 'neb:atomic_structureType'
DEBUG: Add element 'neb:atomic_structure' with path './nebOutput/nebControl/atomic_structure'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:dftType', 'name': 'dft'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:dft': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d22d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dftType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dftType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c143910>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c143950>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:functionalType', 'name': 'functional'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:functional': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143990>
DEBUG: Children: []
DEBUG: Add element 'neb:functional' with path './nebOutput/nebControl/dft/functional'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:hybridType', 'name': 'hybrid', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:hybrid': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143a10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'hybridType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:hybridType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f110>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c14f150>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:qpoint_gridType', 'name': 'qpoint_grid'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:qpoint_grid': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f190>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'qpoint_gridType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:qpoint_gridType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f3d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f390>]
DEBUG: Return existing complex type 'neb:qpoint_gridType'
DEBUG: Add element 'neb:qpoint_grid' with path './nebOutput/nebControl/dft/hybrid/qpoint_grid'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutfock'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutfock': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f1d0>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutfock' with path './nebOutput/nebControl/dft/hybrid/ecutfock'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'exx_fraction'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:exx_fraction': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f210>
DEBUG: Children: []
DEBUG: Add element 'neb:exx_fraction' with path './nebOutput/nebControl/dft/hybrid/exx_fraction'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'screening_parameter'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:screening_parameter': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f250>
DEBUG: Children: []
DEBUG: Add element 'neb:screening_parameter' with path './nebOutput/nebControl/dft/hybrid/screening_parameter'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'exxdiv_treatment'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:exxdiv_treatment': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f290>
DEBUG: Children: []
DEBUG: Add element 'neb:exxdiv_treatment' with path './nebOutput/nebControl/dft/hybrid/exxdiv_treatment'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'x_gamma_extrapolation'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:x_gamma_extrapolation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f2d0>
DEBUG: Children: []
DEBUG: Add element 'neb:x_gamma_extrapolation' with path './nebOutput/nebControl/dft/hybrid/x_gamma_extrapolation'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutvcut'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutvcut': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f350>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutvcut' with path './nebOutput/nebControl/dft/hybrid/ecutvcut'
DEBUG: Return existing complex type 'neb:hybridType'
DEBUG: Add element 'neb:hybrid' with path './nebOutput/nebControl/dft/hybrid'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:dftUType', 'name': 'dftU', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:dftU': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1439d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'dftUType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:dftUType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f450>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c14f550>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'unsignedByte', 'name': 'lda_plus_u_kind', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:lda_plus_u_kind': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f5d0>
DEBUG: Children: []
DEBUG: Add element 'neb:lda_plus_u_kind' with path './nebOutput/nebControl/dft/dftU/lda_plus_u_kind'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_U', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_U': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f590>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_U' with path './nebOutput/nebControl/dft/dftU/Hubbard_U'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_J0', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_J0': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f650>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_J0' with path './nebOutput/nebControl/dft/dftU/Hubbard_J0'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_alpha', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_alpha': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f6d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_alpha' with path './nebOutput/nebControl/dft/dftU/Hubbard_alpha'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'Hubbard_beta', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_beta': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f750>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:Hubbard_beta' with path './nebOutput/nebControl/dft/dftU/Hubbard_beta'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardJType', 'name': 'Hubbard_J', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_J': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f7d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardJType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardJType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fa10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fa50>]
DEBUG: Return existing complex type 'neb:HubbardJType'
DEBUG: Add element 'neb:Hubbard_J' with path './nebOutput/nebControl/dft/dftU/Hubbard_J'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:starting_nsType', 'name': 'starting_ns', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:starting_ns': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f810>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'starting_nsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:starting_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fb90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fb50>]
DEBUG: Return existing complex type 'neb:starting_nsType'
DEBUG: Add element 'neb:starting_ns' with path './nebOutput/nebControl/dft/dftU/starting_ns'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:Hubbard_nsType', 'name': 'Hubbard_ns', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Hubbard_ns': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f850>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'Hubbard_nsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:Hubbard_nsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14fd10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14fc90>]
DEBUG: Return existing complex type 'neb:Hubbard_nsType'
DEBUG: Add element 'neb:Hubbard_ns' with path './nebOutput/nebControl/dft/dftU/Hubbard_ns'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:HubbardProjType', 'name': 'U_projection_type', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:U_projection_type': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c14f890>
DEBUG: Children: []
DEBUG: Add element 'neb:U_projection_type' with path './nebOutput/nebControl/dft/dftU/U_projection_type'
DEBUG: Return existing complex type 'neb:dftUType'
DEBUG: Add element 'neb:dftU' with path './nebOutput/nebControl/dft/dftU'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:vdWType', 'name': 'vdW', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:vdW': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c143a50>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'vdWType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:vdWType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c0d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'vdw_corr'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:vdw_corr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c110>
DEBUG: Children: []
DEBUG: Add element 'neb:vdw_corr' with path './nebOutput/nebControl/dft/vdW/vdw_corr'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'non_local_term', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:non_local_term': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c190>
DEBUG: Children: []
DEBUG: Add element 'neb:non_local_term' with path './nebOutput/nebControl/dft/vdW/non_local_term'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'london_s6', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:london_s6': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c150>
DEBUG: Children: []
DEBUG: Add element 'neb:london_s6' with path './nebOutput/nebControl/dft/vdW/london_s6'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'ts_vdw_econv_thr', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ts_vdw_econv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c1d0>
DEBUG: Children: []
DEBUG: Add element 'neb:ts_vdw_econv_thr' with path './nebOutput/nebControl/dft/vdW/ts_vdw_econv_thr'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'boolean', 'name': 'ts_vdw_isolated', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ts_vdw_isolated': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c250>
DEBUG: Children: []
DEBUG: Add element 'neb:ts_vdw_isolated' with path './nebOutput/nebControl/dft/vdW/ts_vdw_isolated'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'london_rcut', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:london_rcut': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c210>
DEBUG: Children: []
DEBUG: Add element 'neb:london_rcut' with path './nebOutput/nebControl/dft/vdW/london_rcut'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'xdm_a1', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:xdm_a1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c290>
DEBUG: Children: []
DEBUG: Add element 'neb:xdm_a1' with path './nebOutput/nebControl/dft/vdW/xdm_a1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'xdm_a2', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:xdm_a2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c2d0>
DEBUG: Children: []
DEBUG: Add element 'neb:xdm_a2' with path './nebOutput/nebControl/dft/vdW/xdm_a2'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:HubbardCommonType', 'name': 'london_c6', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:london_c6': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c310>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'HubbardCommonType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:HubbardCommonType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c14f8d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c14f910>]
DEBUG: Return existing complex type 'neb:HubbardCommonType'
DEBUG: Add element 'neb:london_c6' with path './nebOutput/nebControl/dft/vdW/london_c6'
DEBUG: Return existing complex type 'neb:vdWType'
DEBUG: Add element 'neb:vdW' with path './nebOutput/nebControl/dft/vdW'
DEBUG: Return existing complex type 'neb:dftType'
DEBUG: Add element 'neb:dft' with path './nebOutput/nebControl/dft'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:spinType', 'name': 'spin'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2310>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'spinType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:spinType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c390>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c3d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'lsda'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:lsda': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c410>
DEBUG: Children: []
DEBUG: Add element 'neb:lsda' with path './nebOutput/nebControl/spin/lsda'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'noncolin'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:noncolin': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c450>
DEBUG: Children: []
DEBUG: Add element 'neb:noncolin' with path './nebOutput/nebControl/spin/noncolin'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'spinorbit'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spinorbit': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c490>
DEBUG: Children: []
DEBUG: Add element 'neb:spinorbit' with path './nebOutput/nebControl/spin/spinorbit'
DEBUG: Return existing complex type 'neb:spinType'
DEBUG: Add element 'neb:spin' with path './nebOutput/nebControl/spin'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:bandsType', 'name': 'bands'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:bands': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2350>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'bandsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:bandsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c4d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15c510>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nbnd', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nbnd': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c590>
DEBUG: Children: []
DEBUG: Add element 'neb:nbnd' with path './nebOutput/nebControl/bands/nbnd'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:smearingType', 'name': 'smearing', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:smearing': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c550>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'smearingType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:smearingType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15c710>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c15c750>]
DEBUG: Return existing complex type 'neb:smearingType'
DEBUG: Add element 'neb:smearing' with path './nebOutput/nebControl/bands/smearing'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tot_charge', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tot_charge': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c5d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tot_charge' with path './nebOutput/nebControl/bands/tot_charge'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tot_magnetization', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tot_magnetization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c610>
DEBUG: Children: []
DEBUG: Add element 'neb:tot_magnetization' with path './nebOutput/nebControl/bands/tot_magnetization'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:occupationsType', 'name': 'occupations'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:occupations': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c650>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'occupationsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:occupationsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15ca10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c15c9d0>]
DEBUG: Return existing complex type 'neb:occupationsType'
DEBUG: Add element 'neb:occupations' with path './nebOutput/nebControl/bands/occupations'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '2', 'type': 'neb:inputOccupationsType', 'name': 'inputOccupations', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:inputOccupations': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15c690>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'inputOccupationsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:inputOccupationsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c101f50>]
DEBUG: Return existing complex type 'neb:inputOccupationsType'
DEBUG: Add element 'neb:inputOccupations' with path './nebOutput/nebControl/bands/inputOccupations'
DEBUG: Return existing complex type 'neb:bandsType'
DEBUG: Add element 'neb:bands' with path './nebOutput/nebControl/bands'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisType', 'name': 'basis'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:basis': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2390>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c15ca90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c15cb10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'gamma_only', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:gamma_only': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cb50>
DEBUG: Children: []
DEBUG: Add element 'neb:gamma_only' with path './nebOutput/nebControl/basis/gamma_only'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutwfc'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutwfc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cb90>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutwfc' with path './nebOutput/nebControl/basis/ecutwfc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecutrho', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecutrho': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cbd0>
DEBUG: Children: []
DEBUG: Add element 'neb:ecutrho' with path './nebOutput/nebControl/basis/ecutrho'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisSetItemType', 'name': 'fft_grid', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fft_grid': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cc10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Return existing complex type 'neb:basisSetItemType'
DEBUG: Add element 'neb:fft_grid' with path './nebOutput/nebControl/basis/fft_grid'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisSetItemType', 'name': 'fft_smooth', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fft_smooth': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cc90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Return existing complex type 'neb:basisSetItemType'
DEBUG: Add element 'neb:fft_smooth' with path './nebOutput/nebControl/basis/fft_smooth'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:basisSetItemType', 'name': 'fft_box', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fft_box': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c15cd10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'basisSetItemType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:basisSetItemType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1671d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167210>]
DEBUG: Return existing complex type 'neb:basisSetItemType'
DEBUG: Add element 'neb:fft_box' with path './nebOutput/nebControl/basis/fft_box'
DEBUG: Return existing complex type 'neb:basisType'
DEBUG: Add element 'neb:basis' with path './nebOutput/nebControl/basis'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:electron_controlType', 'name': 'electron_control'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electron_control': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d23d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electron_controlType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electron_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1674d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c167550>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:diagoType', 'name': 'diagonalization'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diagonalization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1675d0>
DEBUG: Children: []
DEBUG: Add element 'neb:diagonalization' with path './nebOutput/nebControl/electron_control/diagonalization'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:mixingModeType', 'name': 'mixing_mode'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mixing_mode': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167590>
DEBUG: Children: []
DEBUG: Add element 'neb:mixing_mode' with path './nebOutput/nebControl/electron_control/mixing_mode'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'mixing_beta'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mixing_beta': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167610>
DEBUG: Children: []
DEBUG: Add element 'neb:mixing_beta' with path './nebOutput/nebControl/electron_control/mixing_beta'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'conv_thr'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:conv_thr': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167650>
DEBUG: Children: []
DEBUG: Add element 'neb:conv_thr' with path './nebOutput/nebControl/electron_control/conv_thr'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'mixing_ndim'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:mixing_ndim': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1676d0>
DEBUG: Children: []
DEBUG: Add element 'neb:mixing_ndim' with path './nebOutput/nebControl/electron_control/mixing_ndim'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'max_nstep'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:max_nstep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167710>
DEBUG: Children: []
DEBUG: Add element 'neb:max_nstep' with path './nebOutput/nebControl/electron_control/max_nstep'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'real_space_q'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:real_space_q': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167690>
DEBUG: Children: []
DEBUG: Add element 'neb:real_space_q' with path './nebOutput/nebControl/electron_control/real_space_q'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'tq_smoothing'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tq_smoothing': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167750>
DEBUG: Children: []
DEBUG: Add element 'neb:tq_smoothing' with path './nebOutput/nebControl/electron_control/tq_smoothing'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'tbeta_smoothing'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tbeta_smoothing': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1677d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tbeta_smoothing' with path './nebOutput/nebControl/electron_control/tbeta_smoothing'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'diago_thr_init'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diago_thr_init': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167810>
DEBUG: Children: []
DEBUG: Add element 'neb:diago_thr_init' with path './nebOutput/nebControl/electron_control/diago_thr_init'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'diago_full_acc'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diago_full_acc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167850>
DEBUG: Children: []
DEBUG: Add element 'neb:diago_full_acc' with path './nebOutput/nebControl/electron_control/diago_full_acc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'nonNegativeInteger', 'name': 'diago_cg_maxiter'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:diago_cg_maxiter': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167790>
DEBUG: Children: []
DEBUG: Add element 'neb:diago_cg_maxiter' with path './nebOutput/nebControl/electron_control/diago_cg_maxiter'
DEBUG: Return existing complex type 'neb:electron_controlType'
DEBUG: Add element 'neb:electron_control' with path './nebOutput/nebControl/electron_control'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:k_points_IBZType', 'name': 'k_points_IBZ'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:k_points_IBZ': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2450>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'k_points_IBZType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:k_points_IBZType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167ad0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}choice' at 0x7f2e8c167b10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={'maxOccurs': '1', 'minOccurs': '1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:monkhorst_packType', 'name': 'monkhorst_pack', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:monkhorst_pack': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167b90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'monkhorst_packType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:monkhorst_packType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167c10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167cd0>]
DEBUG: Return existing complex type 'neb:monkhorst_packType'
DEBUG: Add element 'neb:monkhorst_pack' with path './nebOutput/nebControl/k_points_IBZ/monkhorst_pack'
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nk', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nk': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167c50>
DEBUG: Children: []
DEBUG: Add element 'neb:nk' with path './nebOutput/nebControl/k_points_IBZ/nk'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:k_pointType', 'name': 'k_point', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:k_point': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c167c90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'k_pointType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:k_pointType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c167ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c167f10>]
DEBUG: Return existing complex type 'neb:k_pointType'
DEBUG: Add element 'neb:k_point' with path './nebOutput/nebControl/k_points_IBZ/k_point'
DEBUG: Return existing complex type 'neb:k_points_IBZType'
DEBUG: Add element 'neb:k_points_IBZ' with path './nebOutput/nebControl/k_points_IBZ'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:ion_controlType', 'name': 'ion_control'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ion_control': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d24d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ion_controlType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ion_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4090>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4050>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'ion_dynamics'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ion_dynamics': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f40d0>
DEBUG: Children: []
DEBUG: Add element 'neb:ion_dynamics' with path './nebOutput/nebControl/ion_control/ion_dynamics'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'upscale', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:upscale': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4110>
DEBUG: Children: []
DEBUG: Add element 'neb:upscale' with path './nebOutput/nebControl/ion_control/upscale'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'remove_rigid_rot', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:remove_rigid_rot': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4150>
DEBUG: Children: []
DEBUG: Add element 'neb:remove_rigid_rot' with path './nebOutput/nebControl/ion_control/remove_rigid_rot'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'refold_pos', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:refold_pos': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4190>
DEBUG: Children: []
DEBUG: Add element 'neb:refold_pos' with path './nebOutput/nebControl/ion_control/refold_pos'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:bfgsType', 'name': 'bfgs', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:bfgs': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f41d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'bfgsType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:bfgsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4250>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4290>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'ndim'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ndim': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4310>
DEBUG: Children: []
DEBUG: Add element 'neb:ndim' with path './nebOutput/nebControl/ion_control/bfgs/ndim'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'trust_radius_min'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:trust_radius_min': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f42d0>
DEBUG: Children: []
DEBUG: Add element 'neb:trust_radius_min' with path './nebOutput/nebControl/ion_control/bfgs/trust_radius_min'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'trust_radius_max'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:trust_radius_max': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4350>
DEBUG: Children: []
DEBUG: Add element 'neb:trust_radius_max' with path './nebOutput/nebControl/ion_control/bfgs/trust_radius_max'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'trust_radius_init'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:trust_radius_init': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4390>
DEBUG: Children: []
DEBUG: Add element 'neb:trust_radius_init' with path './nebOutput/nebControl/ion_control/bfgs/trust_radius_init'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'w1'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:w1': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f43d0>
DEBUG: Children: []
DEBUG: Add element 'neb:w1' with path './nebOutput/nebControl/ion_control/bfgs/w1'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'w2'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:w2': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4410>
DEBUG: Children: []
DEBUG: Add element 'neb:w2' with path './nebOutput/nebControl/ion_control/bfgs/w2'
DEBUG: Return existing complex type 'neb:bfgsType'
DEBUG: Add element 'neb:bfgs' with path './nebOutput/nebControl/ion_control/bfgs'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:mdType', 'name': 'md', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:md': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4210>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'mdType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:mdType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4450>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4490>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'pot_extrapolation'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pot_extrapolation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f44d0>
DEBUG: Children: []
DEBUG: Add element 'neb:pot_extrapolation' with path './nebOutput/nebControl/ion_control/md/pot_extrapolation'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'wfc_extrapolation'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wfc_extrapolation': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4510>
DEBUG: Children: []
DEBUG: Add element 'neb:wfc_extrapolation' with path './nebOutput/nebControl/ion_control/md/wfc_extrapolation'
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'ion_temperature'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ion_temperature': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4590>
DEBUG: Children: []
DEBUG: Add element 'neb:ion_temperature' with path './nebOutput/nebControl/ion_control/md/ion_temperature'
DEBUG: xsd_element_factory: elem.attrib={'default': '20.0', 'maxOccurs': '1', 'type': 'double', 'name': 'timestep'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:timestep': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4550>
DEBUG: Children: []
DEBUG: Add element 'neb:timestep' with path './nebOutput/nebControl/ion_control/md/timestep'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tempw'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tempw': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f45d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tempw' with path './nebOutput/nebControl/ion_control/md/tempw'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'tolp'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tolp': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4610>
DEBUG: Children: []
DEBUG: Add element 'neb:tolp' with path './nebOutput/nebControl/ion_control/md/tolp'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'deltaT'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:deltaT': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4650>
DEBUG: Children: []
DEBUG: Add element 'neb:deltaT' with path './nebOutput/nebControl/ion_control/md/deltaT'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nraise'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nraise': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f46d0>
DEBUG: Children: []
DEBUG: Add element 'neb:nraise' with path './nebOutput/nebControl/ion_control/md/nraise'
DEBUG: Return existing complex type 'neb:mdType'
DEBUG: Add element 'neb:md' with path './nebOutput/nebControl/ion_control/md'
DEBUG: Return existing complex type 'neb:ion_controlType'
DEBUG: Add element 'neb:ion_control' with path './nebOutput/nebControl/ion_control'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:cell_controlType', 'name': 'cell_control'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell_control': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2510>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'cell_controlType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:cell_controlType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4690>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4710>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'cell_dynamics'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell_dynamics': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4750>
DEBUG: Children: []
DEBUG: Add element 'neb:cell_dynamics' with path './nebOutput/nebControl/cell_control/cell_dynamics'
DEBUG: xsd_element_factory: elem.attrib={'default': '0.0', 'type': 'double', 'name': 'pressure'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:pressure': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4790>
DEBUG: Children: []
DEBUG: Add element 'neb:pressure' with path './nebOutput/nebControl/cell_control/pressure'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'wmass', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:wmass': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f47d0>
DEBUG: Children: []
DEBUG: Add element 'neb:wmass' with path './nebOutput/nebControl/cell_control/wmass'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'cell_factor', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:cell_factor': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4810>
DEBUG: Children: []
DEBUG: Add element 'neb:cell_factor' with path './nebOutput/nebControl/cell_control/cell_factor'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'fix_volume', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fix_volume': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4850>
DEBUG: Children: []
DEBUG: Add element 'neb:fix_volume' with path './nebOutput/nebControl/cell_control/fix_volume'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'fix_area', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fix_area': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4890>
DEBUG: Children: []
DEBUG: Add element 'neb:fix_area' with path './nebOutput/nebControl/cell_control/fix_area'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'isotropic', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:isotropic': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f48d0>
DEBUG: Children: []
DEBUG: Add element 'neb:isotropic' with path './nebOutput/nebControl/cell_control/isotropic'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:integerMatrixType', 'name': 'free_cell', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:free_cell': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4910>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'integerMatrixType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:integerMatrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121f10>]
DEBUG: Return existing complex type 'neb:integerMatrixType'
DEBUG: Add element 'neb:free_cell' with path './nebOutput/nebControl/cell_control/free_cell'
DEBUG: Return existing complex type 'neb:cell_controlType'
DEBUG: Add element 'neb:cell_control' with path './nebOutput/nebControl/cell_control'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:symmetry_flagsType', 'name': 'symmetry_flags', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:symmetry_flags': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d25d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'symmetry_flagsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:symmetry_flagsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f49d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'nosym'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nosym': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4a10>
DEBUG: Children: []
DEBUG: Add element 'neb:nosym' with path './nebOutput/nebControl/symmetry_flags/nosym'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'nosym_evc'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nosym_evc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4a50>
DEBUG: Children: []
DEBUG: Add element 'neb:nosym_evc' with path './nebOutput/nebControl/symmetry_flags/nosym_evc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'noinv'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:noinv': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4a90>
DEBUG: Children: []
DEBUG: Add element 'neb:noinv' with path './nebOutput/nebControl/symmetry_flags/noinv'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'no_t_rev'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:no_t_rev': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4ad0>
DEBUG: Children: []
DEBUG: Add element 'neb:no_t_rev' with path './nebOutput/nebControl/symmetry_flags/no_t_rev'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'force_symmorphic'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:force_symmorphic': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4b10>
DEBUG: Children: []
DEBUG: Add element 'neb:force_symmorphic' with path './nebOutput/nebControl/symmetry_flags/force_symmorphic'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'use_all_frac'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:use_all_frac': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4b50>
DEBUG: Children: []
DEBUG: Add element 'neb:use_all_frac' with path './nebOutput/nebControl/symmetry_flags/use_all_frac'
DEBUG: Return existing complex type 'neb:symmetry_flagsType'
DEBUG: Add element 'neb:symmetry_flags' with path './nebOutput/nebControl/symmetry_flags'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:boundary_conditionsType', 'name': 'boundary_conditions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:boundary_conditions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2590>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'boundary_conditionsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:boundary_conditionsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4b90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4c10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'assume_isolated'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:assume_isolated': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4c90>
DEBUG: Children: []
DEBUG: Add element 'neb:assume_isolated' with path './nebOutput/nebControl/boundary_conditions/assume_isolated'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:esmType', 'name': 'esm', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:esm': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4c50>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'esmType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:esmType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4d50>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4d90>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'bc'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:bc': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4dd0>
DEBUG: Children: []
DEBUG: Add element 'neb:bc' with path './nebOutput/nebControl/boundary_conditions/esm/bc'
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'nfit'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nfit': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4e50>
DEBUG: Children: []
DEBUG: Add element 'neb:nfit' with path './nebOutput/nebControl/boundary_conditions/esm/nfit'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'w'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:w': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4e10>
DEBUG: Children: []
DEBUG: Add element 'neb:w' with path './nebOutput/nebControl/boundary_conditions/esm/w'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'efield'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:efield': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4e90>
DEBUG: Children: []
DEBUG: Add element 'neb:efield' with path './nebOutput/nebControl/boundary_conditions/esm/efield'
DEBUG: Return existing complex type 'neb:esmType'
DEBUG: Add element 'neb:esm' with path './nebOutput/nebControl/boundary_conditions/esm'
DEBUG: xsd_element_factory: elem.attrib={'type': 'boolean', 'name': 'fcp_opt', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fcp_opt': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4cd0>
DEBUG: Children: []
DEBUG: Add element 'neb:fcp_opt' with path './nebOutput/nebControl/boundary_conditions/fcp_opt'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'fcp_mu', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:fcp_mu': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4d10>
DEBUG: Children: []
DEBUG: Add element 'neb:fcp_mu' with path './nebOutput/nebControl/boundary_conditions/fcp_mu'
DEBUG: Return existing complex type 'neb:boundary_conditionsType'
DEBUG: Add element 'neb:boundary_conditions' with path './nebOutput/nebControl/boundary_conditions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:ekin_functionalType', 'name': 'ekin_functional', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ekin_functional': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d26d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'ekin_functionalType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:ekin_functionalType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c0f4ed0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c0f4f10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'ecfixed'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:ecfixed': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4f50>
DEBUG: Children: []
DEBUG: Add element 'neb:ecfixed' with path './nebOutput/nebControl/ekin_functional/ecfixed'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'qcutz'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:qcutz': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4f90>
DEBUG: Children: []
DEBUG: Add element 'neb:qcutz' with path './nebOutput/nebControl/ekin_functional/qcutz'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'q2sigma'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:q2sigma': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c0f4fd0>
DEBUG: Children: []
DEBUG: Add element 'neb:q2sigma' with path './nebOutput/nebControl/ekin_functional/q2sigma'
DEBUG: Return existing complex type 'neb:ekin_functionalType'
DEBUG: Add element 'neb:ekin_functional' with path './nebOutput/nebControl/ekin_functional'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'external_atomic_forces', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:external_atomic_forces': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2750>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:external_atomic_forces' with path './nebOutput/nebControl/external_atomic_forces'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'free_positions', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:free_positions': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2810>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:free_positions' with path './nebOutput/nebControl/free_positions'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'starting_atomic_velocities', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:starting_atomic_velocities': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d27d0>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:starting_atomic_velocities' with path './nebOutput/nebControl/starting_atomic_velocities'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:electric_fieldType', 'name': 'electric_field', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2890>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'electric_fieldType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:electric_fieldType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101210>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101250>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:electric_potentialType', 'name': 'electric_potential', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_potential': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101290>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_potential' with path './nebOutput/nebControl/electric_field/electric_potential'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'default': 'false', 'type': 'boolean', 'name': 'dipole_correction', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:dipole_correction': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101310>
DEBUG: Children: []
DEBUG: Add element 'neb:dipole_correction' with path './nebOutput/nebControl/electric_field/dipole_correction'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'electric_field_direction', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field_direction': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101350>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_field_direction' with path './nebOutput/nebControl/electric_field/electric_field_direction'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'potential_max_position', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:potential_max_position': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1013d0>
DEBUG: Children: []
DEBUG: Add element 'neb:potential_max_position' with path './nebOutput/nebControl/electric_field/potential_max_position'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'potential_decrease_width', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:potential_decrease_width': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101450>
DEBUG: Children: []
DEBUG: Add element 'neb:potential_decrease_width' with path './nebOutput/nebControl/electric_field/potential_decrease_width'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'electric_field_amplitude', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field_amplitude': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1014d0>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_field_amplitude' with path './nebOutput/nebControl/electric_field/electric_field_amplitude'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:d3vectorType', 'name': 'electric_field_vector', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:electric_field_vector': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101550>
DEBUG: Children: []
DEBUG: Add element 'neb:electric_field_vector' with path './nebOutput/nebControl/electric_field/electric_field_vector'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'nk_per_string', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nk_per_string': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1015d0>
DEBUG: Children: []
DEBUG: Add element 'neb:nk_per_string' with path './nebOutput/nebControl/electric_field/nk_per_string'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'n_berry_cycles', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:n_berry_cycles': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101650>
DEBUG: Children: []
DEBUG: Add element 'neb:n_berry_cycles' with path './nebOutput/nebControl/electric_field/n_berry_cycles'
DEBUG: Return existing complex type 'neb:electric_fieldType'
DEBUG: Add element 'neb:electric_field' with path './nebOutput/nebControl/electric_field'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:atomic_constraintsType', 'name': 'atomic_constraints', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2690>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_constraintsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_constraintsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c1017d0>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101850>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'integer', 'name': 'num_of_constraints', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:num_of_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101890>
DEBUG: Children: []
DEBUG: Add element 'neb:num_of_constraints' with path './nebOutput/nebControl/atomic_constraints/num_of_constraints'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'double', 'name': 'tolerance', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:tolerance': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c1018d0>
DEBUG: Children: []
DEBUG: Add element 'neb:tolerance' with path './nebOutput/nebControl/atomic_constraints/tolerance'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:atomic_constraintType', 'name': 'atomic_constraint', 'minOccurs': '1'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:atomic_constraint': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101910>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'atomic_constraintType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:atomic_constraintType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101990>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c101a10>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:constr_parms_listType', 'name': 'constr_parms'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constr_parms': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101a50>
DEBUG: Children: []
DEBUG: Add element 'neb:constr_parms' with path './nebOutput/nebControl/atomic_constraints/atomic_constraint/constr_parms'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:constr_typeType', 'name': 'constr_type'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constr_type': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101ad0>
DEBUG: Children: []
DEBUG: Add element 'neb:constr_type' with path './nebOutput/nebControl/atomic_constraints/atomic_constraint/constr_type'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'constr_target'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:constr_target': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101b10>
DEBUG: Children: []
DEBUG: Add element 'neb:constr_target' with path './nebOutput/nebControl/atomic_constraints/atomic_constraint/constr_target'
DEBUG: Return existing complex type 'neb:atomic_constraintType'
DEBUG: Add element 'neb:atomic_constraint' with path './nebOutput/nebControl/atomic_constraints/atomic_constraint'
DEBUG: Return existing complex type 'neb:atomic_constraintsType'
DEBUG: Add element 'neb:atomic_constraints' with path './nebOutput/nebControl/atomic_constraints'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:spin_constraintsType', 'name': 'spin_constraints', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2950>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'spin_constraintsType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:spin_constraintsType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c101050>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c1010d0>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'string', 'name': 'spin_constraints'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:spin_constraints': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101110>
DEBUG: Children: []
DEBUG: Add element 'neb:spin_constraints' with path './nebOutput/nebControl/spin_constraints/spin_constraints'
DEBUG: xsd_element_factory: elem.attrib={'type': 'double', 'name': 'lagrange_multiplier'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:lagrange_multiplier': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101150>
DEBUG: Children: []
DEBUG: Add element 'neb:lagrange_multiplier' with path './nebOutput/nebControl/spin_constraints/lagrange_multiplier'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': '1', 'type': 'neb:d3vectorType', 'name': 'target_magnetization', 'minOccurs': '0'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:target_magnetization': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c101190>
DEBUG: Children: []
DEBUG: Add element 'neb:target_magnetization' with path './nebOutput/nebControl/spin_constraints/target_magnetization'
DEBUG: Return existing complex type 'neb:spin_constraintsType'
DEBUG: Add element 'neb:spin_constraints' with path './nebOutput/nebControl/spin_constraints'
DEBUG: Return existing complex type 'neb:engineInputType'
DEBUG: Add element 'neb:nebControl' with path './nebOutput/nebControl'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:plotType', 'name': 'nebPlot'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:nebPlot': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2d50>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'plotType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:plotType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2e90>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2f50>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:vectorType', 'name': 'Abscissae'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Abscissae': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2fd0>
DEBUG: Children: []
DEBUG: Add element 'neb:Abscissae' with path './nebOutput/nebPlot/Abscissae'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:vectorType', 'name': 'Ordinates'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:Ordinates': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5dc050>
DEBUG: Children: []
DEBUG: Add element 'neb:Ordinates' with path './nebOutput/nebPlot/Ordinates'
DEBUG: Return existing complex type 'neb:plotType'
DEBUG: Add element 'neb:nebPlot' with path './nebOutput/nebPlot'
DEBUG: xsd_element_factory: elem.attrib={'maxOccurs': 'unbounded', 'type': 'neb:imageGradientType', 'name': 'finalImageGradient'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:finalImageGradient': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2d90>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'imageGradientType'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:imageGradientType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c5d2e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}sequence' at 0x7f2e8c5d2e50>]
DEBUG: Call from xsd_element_factory: parse content_model declarations!
DEBUG: xsd_group_factory: elem.attrib={}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: xsd_element_factory: elem.attrib={'type': 'positiveInteger', 'name': 'imageNumber'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:imageNumber': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2ed0>
DEBUG: Children: []
DEBUG: Add element 'neb:imageNumber' with path './nebOutput/finalImageGradient/imageNumber'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:matrixType', 'name': 'gradient'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:gradient': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5d2f10>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'matrixType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:matrixType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121e10>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121e50>]
DEBUG: Return existing complex type 'neb:matrixType'
DEBUG: Add element 'neb:gradient' with path './nebOutput/finalImageGradient/gradient'
DEBUG: Return existing complex type 'neb:imageGradientType'
DEBUG: Add element 'neb:finalImageGradient' with path './nebOutput/finalImageGradient'
DEBUG: Return existing complex type 'neb:nebOutputType'
DEBUG: Add element 'neb:nebOutput' with path './nebOutput'
DEBUG: xsd_element_factory: elem.attrib={'type': 'nonNegativeInteger', 'name': 'CpuTime', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:CpuTime': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5690>
DEBUG: Children: []
DEBUG: Add element 'neb:CpuTime' with path './CpuTime'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:statusType', 'name': 'status', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:status': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5710>
DEBUG: Children: []
DEBUG: Add element 'neb:status' with path './status'
DEBUG: xsd_element_factory: elem.attrib={'type': 'neb:closedType', 'name': 'closed', 'minOccurs': '0'}, kwargs=['xsd_elements', 'prefix', 'parent_path', 'xsd_types', 'xsd_attribute_groups', 'xsd_attributes']
INFO: Parse global element 'neb:closed': <Element '{http://www.w3.org/2001/XMLSchema}element' at 0x7f2e8c5c5750>
DEBUG: Children: []
DEBUG: xsd_complex_type_factory: elem.attrib={'name': 'closedType'}, kwargs=['xsd_elements', 'xsd_types', 'parent_path', 'prefix', 'xsd_attribute_groups', 'xsd_attributes']
DEBUG: Parse global complexType 'neb:closedType': <Element '{http://www.w3.org/2001/XMLSchema}complexType' at 0x7f2e8c121650>
DEBUG: Children: [<Element '{http://www.w3.org/2001/XMLSchema}simpleContent' at 0x7f2e8c121790>]
DEBUG: Return existing complex type 'neb:closedType'
DEBUG: Add element 'neb:closed' with path './closed'
DEBUG: Return existing complex type 'neb:NebRunType'
DEBUG: Add element 'neb:nebRun' with path '.'
DEBUG: 435 XSD elements added
WARNING: XML Schema validation not available!
DEBUG: Added one-to-one association: './engine/ekin_functional/ecfixed'='SYSTEM[ecfixed]'
DEBUG: Added one-to-one association: './engine/ekin_functional/qcutz'='SYSTEM[qcutz]'
DEBUG: Added one-to-one association: './engine/ekin_functional/q2sigma'='SYSTEM[q2sigma]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/esm/bc'='SYSTEM[esm_bc]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/esm/efield'='SYSTEM[esm_efield]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/esm/w'='SYSTEM[esm_w]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/esm/nfit'='SYSTEM[esm_nfit]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/assume_isolated'='SYSTEM[assume_isolated]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/fcp_opt'='CONTROL[lfcpopt]'
DEBUG: Added one-to-one association: './engine/boundary_conditions/fcp_mu'='SYSTEM[fcp_mu]'
DEBUG: Added one-to-one association: './engine/basis/fft_box/nr3'='SYSTEM[nr3b]'
DEBUG: Added one-to-one association: './engine/basis/fft_box/nr2'='SYSTEM[nr2b]'
DEBUG: Added one-to-one association: './engine/basis/fft_box/nr1'='SYSTEM[nr1b]'
DEBUG: Added one-to-one association: './engine/basis/fft_grid/nr3'='SYSTEM[nr3]'
DEBUG: Added one-to-one association: './engine/basis/fft_grid/nr2'='SYSTEM[nr2]'
DEBUG: Added one-to-one association: './engine/basis/fft_grid/nr1'='SYSTEM[nr1]'
DEBUG: Added one-to-one association: './engine/basis/ecutwfc'='SYSTEM[ecutwfc]'
DEBUG: Added one-to-one association: './engine/basis/ecutrho'='SYSTEM[ecutrho]'
DEBUG: Added single-variant mapping: './engine/basis/gamma_only'=('K_POINTS', <function get_k_points_card at 0x7f2e8c7449b0>, None)
DEBUG: Added one-to-one association: './engine/basis/fft_smooth/nr3'='SYSTEM[nr3s]'
DEBUG: Added one-to-one association: './engine/basis/fft_smooth/nr2'='SYSTEM[nr2s]'
DEBUG: Added one-to-one association: './engine/basis/fft_smooth/nr1'='SYSTEM[nr1s]'
DEBUG: Added one-to-one association: './engine/spin_constraints/lagrange_multiplier'='SYSTEM[lambda]'
DEBUG: Added one-to-one association: './engine/spin_constraints/spin_constraints'='SYSTEM[constrained_magnetization]'
DEBUG: Added one-to-one association: './engine/spin_constraints/target_magnetization'='SYSTEM[fixed_magnetization]'
DEBUG: Added single-variant mapping: './engine/k_points_IBZ'=('K_POINTS', <function get_k_points_card at 0x7f2e8c7449b0>, None)
DEBUG: Added one-to-one association: './engine/symmetry_flags/force_symmorphic'='SYSTEM[force_symmorphic]'
DEBUG: Added one-to-one association: './engine/symmetry_flags/nosym_evc'='SYSTEM[nosym_evc]'
DEBUG: Added one-to-one association: './engine/symmetry_flags/noinv'='SYSTEM[noinv]'
DEBUG: Added one-to-one association: './engine/symmetry_flags/use_all_frac'='SYSTEM[use_all_frac]'
DEBUG: Added one-to-one association: './engine/symmetry_flags/nosym'='SYSTEM[nosym]'
DEBUG: Added one-to-one association: './engine/symmetry_flags/no_t_rev'='SYSTEM[no_t_rev]'
DEBUG: Added one-to-one association: './engine/ion_control/md/ion_temperature'='IONS[ion_temperature]'
DEBUG: Added one-to-one association: './engine/ion_control/md/wfc_extrapolation'='IONS[wfc_extrapolation]'
DEBUG: Added one-to-one association: './engine/ion_control/md/timestep'='CONTROL[dt]'
DEBUG: Added one-to-one association: './engine/ion_control/md/tolp'='IONS[tolp]'
DEBUG: Added one-to-one association: './engine/ion_control/md/nraise'='IONS[nraise]'
DEBUG: Added one-to-one association: './engine/ion_control/md/pot_extrapolation'='IONS[pot_extrapolation]'
DEBUG: Added one-to-one association: './engine/ion_control/md/tempw'='IONS[tempw]'
DEBUG: Added one-to-one association: './engine/ion_control/md/deltaT'='IONS[delta_t]'
DEBUG: Added one-to-one association: './engine/ion_control/bfgs/ndim'='IONS[bfgs_ndim]'
DEBUG: Added one-to-one association: './engine/ion_control/bfgs/trust_radius_init'='IONS[trust_radius_ini]'
DEBUG: Added one-to-one association: './engine/ion_control/bfgs/trust_radius_min'='IONS[trust_radius_min]'
DEBUG: Added one-to-one association: './engine/ion_control/bfgs/trust_radius_max'='IONS[trust_radius_max]'
DEBUG: Added one-to-one association: './engine/ion_control/bfgs/w2'='IONS[w_2]'
DEBUG: Added one-to-one association: './engine/ion_control/bfgs/w1'='IONS[w_1]'
DEBUG: Added one-to-one association: './engine/ion_control/upscale'='IONS[upscale]'
DEBUG: Added one-to-one association: './engine/ion_control/refold_pos'='IONS[refold_pos]'
DEBUG: Added one-to-one association: './engine/ion_control/remove_rigid_rot'='IONS[remove_rigid_rot]'
DEBUG: Added one-to-one association: './engine/ion_control/ion_dynamics'='IONS[ion_dynamics]'
DEBUG: Added single-variant mapping: './engine/atomic_constraints'=('CONSTRAINTS', <function get_atomic_constraints_card at 0x7f2e8c744938>, None)
DEBUG: Added one-to-one association: './engine/control_variables/stress'='CONTROL[tstress]'
DEBUG: Added one-to-one association: './engine/control_variables/disk_io'='CONTROL[disk_io]'
DEBUG: Added one-to-one association: './engine/control_variables/wf_collect'='CONTROL[wf_collect]'
DEBUG: Added one-to-one association: './engine/control_variables/title'='CONTROL[title]'
DEBUG: Added one-to-one association: './engine/control_variables/calculation'='CONTROL[calculation]'
DEBUG: Added one-to-one association: './engine/control_variables/verbosity'='CONTROL[verbosity]'
DEBUG: Added one-to-one association: './engine/control_variables/pseudo_dir'='CONTROL[pseudo_dir]'
DEBUG: Added one-to-one association: './engine/control_variables/prefix'='CONTROL[prefix]'
DEBUG: Added one-to-one association: './engine/control_variables/forc_conv_thr'='CONTROL[forc_conv_thr]'
DEBUG: Added one-to-one association: './engine/control_variables/print_every'='CONTROL[iprint]'
DEBUG: Added one-to-one association: './engine/control_variables/max_seconds'='CONTROL[max_seconds]'
DEBUG: Added one-to-one association: './engine/control_variables/forces'='CONTROL[tprnfor]'
DEBUG: Added one-to-one association: './engine/control_variables/restart_mode'='CONTROL[restart_mode]'
DEBUG: Added one-to-one association: './engine/control_variables/etot_conv_thr'='CONTROL[etot_conv_thr]'
DEBUG: Added one-to-one association: './engine/control_variables/press_conv_thr'='CELL[press_conv_thr]'
DEBUG: Added one-to-one association: './engine/control_variables/nstep'='CONTROL[nstep]'
DEBUG: Added one-to-one association: './engine/control_variables/outdir'='CONTROL[outdir]'
DEBUG: Added one-to-one association: './engine/electric_field/potential_decrease_width'='SYSTEM[eopreg]'
DEBUG: Added one-to-one association: './engine/electric_field/nk_per_string'='CONTROL[nppstr]'
DEBUG: Added one-to-one association: './engine/electric_field/potential_max_position'='SYSTEM[emaxpos]'
DEBUG: Added multi-variant mapping: './engine/electric_field/electric_field_amplitude'=(('SYSTEM[eamp]', <function get_system_eamp at 0x7f2e8c74f140>, None), ('ELECTRONS[efield]', <function get_electrons_efield at 0x7f2e8c74f1b8>, None))
DEBUG: Added one-to-one association: './engine/electric_field/dipole_correction'='CONTROL[dipfield]'
DEBUG: Added one-to-one association: './engine/electric_field/electric_field_vector'='ELECTRONS[efield_cart]'
DEBUG: Added multi-variant mapping: './engine/electric_field/electric_potential'=(('CONTROL[tefield]', <function get_electric_potential_related at 0x7f2e8c74f2a8>, None), ('CONTROL[lelfield]', <function get_electric_potential_related at 0x7f2e8c74f2a8>, None), ('CONTROL[lberry]', <function get_electric_potential_related at 0x7f2e8c74f2a8>, None), ('SYSTEM[eamp]', <function get_system_eamp at 0x7f2e8c74f140>, None), ('ELECTRONS[efield]', <function get_electrons_efield at 0x7f2e8c74f1b8>, None), ('SYSTEM[edir]', <function get_system_edir at 0x7f2e8c74f230>, None), ('CONTROL[gdir]', <function get_control_gdir at 0x7f2e8c74f320>, None))
DEBUG: Added one-to-one association: './engine/electric_field/n_berry_cycles'='CONTROL[nberrycyc]'
DEBUG: Added multi-variant mapping: './engine/electric_field/electric_field_direction'=(('SYSTEM[edir]', <function get_system_edir at 0x7f2e8c74f230>, None), ('CONTROL[gdir]', <function get_control_gdir at 0x7f2e8c74f320>, None))
DEBUG: Added single-variant mapping: './engine/external_atomic_forces'=('ATOMIC_FORCES', <function get_atomic_forces_card at 0x7f2e8c744a28>, None)
DEBUG: Added one-to-one association: './engine/dft/hybrid/ecutfock'='SYSTEM[ecutfock]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/exxdiv_treatment'='SYSTEM[exxdiv_treatment]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/x_gamma_extrapolation'='SYSTEM[x_gamma_extrapolation]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/exx_fraction'='SYSTEM[exx_fraction]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/screening_parameter'='SYSTEM[screening_parameter]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/ecutvcut'='SYSTEM[ecutvcut]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/qpoint_grid/nqx3'='SYSTEM[nqx3]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/qpoint_grid/nqx2'='SYSTEM[nqx2]'
DEBUG: Added one-to-one association: './engine/dft/hybrid/qpoint_grid/nqx1'='SYSTEM[nqx1]'
DEBUG: Added one-to-one association: './engine/dft/functional'='SYSTEM[input_dft]'
DEBUG: Added one-to-one association: './engine/dft/vdW/london_s6'='SYSTEM[london_s6]'
DEBUG: Added one-to-one association: './engine/dft/vdW/london_rcut'='SYSTEM[london_rcut]'
DEBUG: Added one-to-one association: './engine/dft/vdW/vdw_corr'='SYSTEM[vdw_corr]'
DEBUG: Added one-to-one association: './engine/dft/vdW/xdm_a1'='SYSTEM[xdm_a1]'
DEBUG: Added one-to-one association: './engine/dft/vdW/xdm_a2'='SYSTEM[xdm_a2]'
DEBUG: Added one-to-one association: './engine/dft/vdW/ts_vdw_isolated'='SYSTEM[ts_vdw_isolated]'
DEBUG: Added single-variant mapping: './engine/dft/vdW/london_c6/_text'=('SYSTEM[london_c6]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added one-to-one association: './engine/dft/vdW/ts_vdw_econv_thr'='SYSTEM[ts_vdw_econv_thr]'
DEBUG: Added single-variant mapping: './engine/dft/dftU/Hubbard_J0/_text'=('SYSTEM[Hubbard_J0]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added single-variant mapping: './engine/dft/dftU/Hubbard_U/_text'=('SYSTEM[Hubbard_U]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added single-variant mapping: './engine/dft/dftU/starting_ns/_text'=('SYSTEM[starting_ns_eigenvalue]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added one-to-one association: './engine/dft/dftU/lda_plus_u_kind'='SYSTEM[lda_plus_u_kind]'
DEBUG: Added one-to-one association: './engine/dft/dftU/U_projection_type'='SYSTEM[U_projection_type]'
DEBUG: Added single-variant mapping: './engine/dft/dftU/Hubbard_beta/_text'=('SYSTEM[Hubbard_beta]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added single-variant mapping: './engine/dft/dftU/Hubbard_alpha/_text'=('SYSTEM[Hubbard_alpha]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added single-variant mapping: './engine/dft/dftU/Hubbard_J/_text'=('SYSTEM[Hubbard_J]', <function get_specie_related_values at 0x7f2e8c744e60>, None)
DEBUG: Added one-to-one association: './engine/bands/nbnd'='SYSTEM[nbnd]'
DEBUG: Added one-to-one association: './engine/bands/tot_magnetization'='SYSTEM[tot_magnetization]'
DEBUG: Added one-to-one association: './engine/bands/smearing/degauss'='SYSTEM[degauss]'
DEBUG: Added one-to-one association: './engine/bands/smearing/_text'='SYSTEM[smearing]'
DEBUG: Added one-to-one association: './engine/bands/tot_charge'='SYSTEM[tot_charge]'
DEBUG: Added one-to-one association: './engine/bands/occupations/_text'='SYSTEM[occupations]'
DEBUG: Added single-variant mapping: './engine/atomic_structure/atomic_positions'=('ATOMIC_FORCES', <function get_neb_atomic_forces_card at 0x7f2e8c744cf8>, None)
DEBUG: Added single-variant mapping: './engine/atomic_structure/nat'=('SYSTEM[nat]', <function neb_set_system_nat at 0x7f2e8c74f410>, None)
DEBUG: Added multi-variant mapping: './engine/atomic_structure/_text'=(('ATOMIC_POSITIONS', <function get_neb_images_positions_card at 0x7f2e8c744c08>, None), ('CELL_PARAMETERS', <function get_neb_cell_parameters_card at 0x7f2e8c744c80>, None))
DEBUG: Added single-variant mapping: './engine/cell_control/fix_volume'=('CELL[cell_dofree]', <function get_cell_dofree at 0x7f2e8c74f398>, None)
DEBUG: Added single-variant mapping: './engine/cell_control/fix_area'=('CELL[cell_dofree]', <function get_cell_dofree at 0x7f2e8c74f398>, None)
DEBUG: Added single-variant mapping: './engine/cell_control/free_cell'=('CELL_PARAMETERS', <function get_cell_parameters_card at 0x7f2e8c744aa0>, None)
DEBUG: Added one-to-one association: './engine/cell_control/pressure'='CELL[press]'
DEBUG: Added single-variant mapping: './engine/cell_control/isotropic'=('CELL[cell_dofree]', <function get_cell_dofree at 0x7f2e8c74f398>, None)
DEBUG: Added one-to-one association: './engine/cell_control/cell_dynamics'='CELL[cell_dynamics]'
DEBUG: Added one-to-one association: './engine/cell_control/cell_factor'='CELL[cell_factor]'
DEBUG: Added one-to-one association: './engine/cell_control/wmass'='CELL[wmass]'
DEBUG: Added multi-variant mapping: './engine/spin/noncolin'=(('SYSTEM[nspin]', <function get_system_nspin at 0x7f2e8c74f0c8>, None),)
DEBUG: Added one-to-one association: './engine/spin/spinorbit'='SYSTEM[lspinorb]'
DEBUG: Added single-variant mapping: './engine/spin/lsda'=('SYSTEM[nspin]', <function get_system_nspin at 0x7f2e8c74f0c8>, None)
DEBUG: Added multi-variant mapping: './engine/free_positions'=(('ATOMIC_POSITIONS', None, None), ('CELL_PARAMETERS', None, None))
DEBUG: Added one-to-one association: './engine/atomic_species/ntyp'='SYSTEM[ntyp]'
DEBUG: Added multi-variant mapping: './engine/atomic_species/_text'=(('ATOMIC_SPECIES', <function get_atomic_species_card at 0x7f2e8c744848>, None), ('SYSTEM[Hubbard_U]', None, None), ('SYSTEM[Hubbard_J0]', None, None), ('SYSTEM[Hubbard_alpha]', None, None), ('SYSTEM[Hubbard_beta]', None, None), ('SYSTEM[Hubbard_J]', None, None), ('SYSTEM[starting_ns_eigenvalue]', None, None), ('SYSTEM[starting_magnetization]', <function get_starting_magnetization at 0x7f2e8c744f50>, None))
DEBUG: Added one-to-one association: './engine/electron_control/tq_smoothing'='ELECTRONS[tq_smoothing]'
DEBUG: Added one-to-one association: './engine/electron_control/conv_thr'='ELECTRONS[conv_thr]'
DEBUG: Added one-to-one association: './engine/electron_control/diago_thr_init'='ELECTRONS[diago_thr_init]'
DEBUG: Added one-to-one association: './engine/electron_control/diago_full_acc'='ELECTRONS[diago_full_acc]'
DEBUG: Added one-to-one association: './engine/electron_control/max_nstep'='ELECTRONS[electron_maxstep]'
DEBUG: Added one-to-one association: './engine/electron_control/diago_cg_maxiter'='ELECTRONS[diago_cg_maxiter]'
DEBUG: Added one-to-one association: './engine/electron_control/mixing_ndim'='ELECTRONS[mixing_ndim]'
DEBUG: Added one-to-one association: './engine/electron_control/mixing_mode'='ELECTRONS[mixing_mode]'
DEBUG: Added one-to-one association: './engine/electron_control/diagonalization'='ELECTRONS[diagonalization]'
DEBUG: Added one-to-one association: './engine/electron_control/tbeta_smoothing'='ELECTRONS[tbeta_smoothing]'
DEBUG: Added one-to-one association: './engine/electron_control/mixing_beta'='ELECTRONS[mixing_beta]'
DEBUG: Added one-to-one association: './engine/electron_control/real_space_q'='ELECTRONS[tqr]'
DEBUG: Added one-to-one association: './path/stringMethod'='PATH[string_method]'
DEBUG: Added one-to-one association: './path/targetFermiEnergy'='PATH[fcp_mu]'
DEBUG: Added single-variant mapping: './path/climbingImageIndex'=('CLIMBING_IMAGES', <function get_climbing_images at 0x7f2e8c744b90>, None)
DEBUG: Added one-to-one association: './path/restartMode'='PATH[restart_mode]'
DEBUG: Added one-to-one association: './path/optimizationScheme'='PATH[opt_scheme]'
DEBUG: Added one-to-one association: './path/totChargeLast'='PATH[fcp_tot_charge_last]'
DEBUG: Added one-to-one association: './path/pathNstep'='PATH[nstep_path]'
DEBUG: Added one-to-one association: './path/useFreezingFlag'='PATH[use_freezing]'
DEBUG: Added one-to-one association: './path/useMassesFlag'='PATH[use_masses]'
DEBUG: Added one-to-one association: './path/constantBiasFlag'='PATH[lfcpopt]'
DEBUG: Added multi-variant mapping: './path/climbingImage'=(('CLIMBING_IMAGES', <function get_climbing_images at 0x7f2e8c744b90>, None),)
DEBUG: Added one-to-one association: './path/numOfImages'='PATH[num_of_images]'
DEBUG: Added one-to-one association: './path/totChargeFirst'='PATH[fcp_tot_charge_first]'
DEBUG: Check value: CLIMBING_IMAGES
DEBUG: Check value: <function get_climbing_images at 0x7f2e8c744b90>
DEBUG: Check value: None
DEBUG: Check value: SYSTEM[london_c6]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: SYSTEM[nspin]
DEBUG: Check value: <function get_system_nspin at 0x7f2e8c74f0c8>
DEBUG: Check value: None
DEBUG: Check value: ('SYSTEM[edir]', <function get_system_edir at 0x7f2e8c74f230>, None)
DEBUG: Check value: ('CONTROL[gdir]', <function get_control_gdir at 0x7f2e8c74f320>, None)
DEBUG: Check value: CELL[cell_dofree]
DEBUG: Check value: <function get_cell_dofree at 0x7f2e8c74f398>
DEBUG: Check value: None
DEBUG: Check value: SYSTEM[Hubbard_J0]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: CELL[cell_dofree]
DEBUG: Check value: <function get_cell_dofree at 0x7f2e8c74f398>
DEBUG: Check value: None
DEBUG: Check value: SYSTEM[Hubbard_U]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: ATOMIC_FORCES
DEBUG: Check value: <function get_neb_atomic_forces_card at 0x7f2e8c744cf8>
DEBUG: Check value: None
DEBUG: Check value: ('ATOMIC_POSITIONS', None, None)
DEBUG: Check value: ('CELL_PARAMETERS', None, None)
DEBUG: Check value: SYSTEM[Hubbard_alpha]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: CONSTRAINTS
DEBUG: Check value: <function get_atomic_constraints_card at 0x7f2e8c744938>
DEBUG: Check value: None
DEBUG: Check value: CELL[cell_dofree]
DEBUG: Check value: <function get_cell_dofree at 0x7f2e8c74f398>
DEBUG: Check value: None
DEBUG: Check value: SYSTEM[Hubbard_beta]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: CELL_PARAMETERS
DEBUG: Check value: <function get_cell_parameters_card at 0x7f2e8c744aa0>
DEBUG: Check value: None
DEBUG: Check value: ('ATOMIC_SPECIES', <function get_atomic_species_card at 0x7f2e8c744848>, None)
DEBUG: Check value: ('SYSTEM[Hubbard_U]', None, None)
DEBUG: Check value: ('SYSTEM[Hubbard_J0]', None, None)
DEBUG: Check value: ('SYSTEM[Hubbard_alpha]', None, None)
DEBUG: Check value: ('SYSTEM[Hubbard_beta]', None, None)
DEBUG: Check value: ('SYSTEM[Hubbard_J]', None, None)
DEBUG: Check value: ('SYSTEM[starting_ns_eigenvalue]', None, None)
DEBUG: Check value: ('SYSTEM[starting_magnetization]', <function get_starting_magnetization at 0x7f2e8c744f50>, None)
DEBUG: Check value: SYSTEM[nat]
DEBUG: Check value: <function neb_set_system_nat at 0x7f2e8c74f410>
DEBUG: Check value: None
DEBUG: Check value: ('CONTROL[tefield]', <function get_electric_potential_related at 0x7f2e8c74f2a8>, None)
DEBUG: Check value: ('CONTROL[lelfield]', <function get_electric_potential_related at 0x7f2e8c74f2a8>, None)
DEBUG: Check value: ('CONTROL[lberry]', <function get_electric_potential_related at 0x7f2e8c74f2a8>, None)
DEBUG: Check value: ('SYSTEM[eamp]', <function get_system_eamp at 0x7f2e8c74f140>, None)
DEBUG: Check value: ('ELECTRONS[efield]', <function get_electrons_efield at 0x7f2e8c74f1b8>, None)
DEBUG: Check value: ('SYSTEM[edir]', <function get_system_edir at 0x7f2e8c74f230>, None)
DEBUG: Check value: ('CONTROL[gdir]', <function get_control_gdir at 0x7f2e8c74f320>, None)
DEBUG: Check value: K_POINTS
DEBUG: Check value: <function get_k_points_card at 0x7f2e8c7449b0>
DEBUG: Check value: None
DEBUG: Check value: ('CLIMBING_IMAGES', <function get_climbing_images at 0x7f2e8c744b90>, None)
DEBUG: Check value: ATOMIC_FORCES
DEBUG: Check value: <function get_atomic_forces_card at 0x7f2e8c744a28>
DEBUG: Check value: None
DEBUG: Check value: SYSTEM[Hubbard_J]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: ('SYSTEM[nspin]', <function get_system_nspin at 0x7f2e8c74f0c8>, None)
DEBUG: Check value: SYSTEM[starting_ns_eigenvalue]
DEBUG: Check value: <function get_specie_related_values at 0x7f2e8c744e60>
DEBUG: Check value: None
DEBUG: Check value: ('SYSTEM[eamp]', <function get_system_eamp at 0x7f2e8c74f140>, None)
DEBUG: Check value: ('ELECTRONS[efield]', <function get_electrons_efield at 0x7f2e8c74f1b8>, None)
DEBUG: Check value: ('ATOMIC_POSITIONS', <function get_neb_images_positions_card at 0x7f2e8c744c08>, None)
DEBUG: Check value: ('CELL_PARAMETERS', <function get_neb_cell_parameters_card at 0x7f2e8c744c80>, None)
DEBUG: Check value: K_POINTS
DEBUG: Check value: <function get_k_points_card at 0x7f2e8c7449b0>
DEBUG: Check value: None
DEBUG: Decode node 'input' with path './input'
DEBUG: Decode node 'path' with path './input/path'
DEBUG: Decode node 'stringMethod' with path './input/path/stringMethod'
DEBUG: Decode 'neb' to type 'neb:stringMethodType'
DEBUG: Text decoded to: neb
DEBUG: Decode node 'restart_mode' with path './input/path/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Decode node 'pathNstep' with path './input/path/pathNstep'
DEBUG: Decode '20' to type 'positiveInteger'
DEBUG: Text decoded to: 20
DEBUG: Decode node 'numOfImages' with path './input/path/numOfImages'
DEBUG: Decode '7' to type 'positiveInteger'
DEBUG: Text decoded to: 7
DEBUG: Decode node 'optimizationScheme' with path './input/path/optimizationScheme'
DEBUG: Decode 'broyden' to type 'neb:optimizationSchemeType'
DEBUG: Text decoded to: broyden
DEBUG: Decode node 'climbingImage' with path './input/path/climbingImage'
DEBUG: Decode 'auto' to type 'neb:climbingImageType'
DEBUG: Text decoded to: auto
DEBUG: Decode node 'endImagesOptimizationFlag' with path './input/path/endImagesOptimizationFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'minimumImageFlag' with path './input/path/minimumImageFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'optimizationStepLength' with path './input/path/optimizationStepLength'
DEBUG: Decode '2.000E+00' to type 'double'
DEBUG: Text decoded to: 2.0
DEBUG: Decode node 'pathThreshold' with path './input/path/pathThreshold'
DEBUG: Decode '0.10' to type 'double'
DEBUG: Text decoded to: 0.1
DEBUG: Decode node 'elasticConstMax' with path './input/path/elasticConstMax'
DEBUG: Decode '0.30' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Decode node 'elasticConstMin' with path './input/path/elasticConstMin'
DEBUG: Decode '0.20' to type 'double'
DEBUG: Text decoded to: 0.2
DEBUG: Decode node 'useMassesFlag' with path './input/path/useMassesFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'useFreezingFlag' with path './input/path/useFreezingFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:pathInputType'
DEBUG: Decode node 'engine' with path './input/engine'
DEBUG: Decode node 'control_variables' with path './input/engine/control_variables'
DEBUG: Decode node 'title' with path './input/engine/control_variables/title'
DEBUG: Decode '' to type 'string'
DEBUG: Text decoded to: 
DEBUG: Decode node 'calculation' with path './input/engine/control_variables/calculation'
DEBUG: Decode 'scf' to type 'neb:calculationType'
DEBUG: Text decoded to: scf
DEBUG: Decode node 'restart_mode' with path './input/engine/control_variables/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Decode node 'prefix' with path './input/engine/control_variables/prefix'
DEBUG: Decode 'H2+H' to type 'string'
DEBUG: Text decoded to: H2+H
DEBUG: Decode node 'pseudo_dir' with path './input/engine/control_variables/pseudo_dir'
DEBUG: Decode '/scratch/pdelugas/espresso/pseudo' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/pseudo
DEBUG: Decode node 'outdir' with path './input/engine/control_variables/outdir'
DEBUG: Decode '/scratch/pdelugas/espresso/tempdir' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/tempdir
DEBUG: Decode node 'stress' with path './input/engine/control_variables/stress'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'forces' with path './input/engine/control_variables/forces'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'wf_collect' with path './input/engine/control_variables/wf_collect'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'disk_io' with path './input/engine/control_variables/disk_io'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Decode node 'max_seconds' with path './input/engine/control_variables/max_seconds'
DEBUG: Decode '10000000' to type 'positiveInteger'
DEBUG: Text decoded to: 10000000
DEBUG: Decode node 'etot_conv_thr' with path './input/engine/control_variables/etot_conv_thr'
DEBUG: Decode '0.1000000000000E-03' to type 'double'
DEBUG: Text decoded to: 0.0001
DEBUG: Decode node 'forc_conv_thr' with path './input/engine/control_variables/forc_conv_thr'
DEBUG: Decode '0.1000000000000E-02' to type 'double'
DEBUG: Text decoded to: 0.001
DEBUG: Decode node 'press_conv_thr' with path './input/engine/control_variables/press_conv_thr'
DEBUG: Decode '5.00000000E-01' to type 'double'
DEBUG: Text decoded to: 0.5
DEBUG: Decode node 'verbosity' with path './input/engine/control_variables/verbosity'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Decode node 'print_every' with path './input/engine/control_variables/print_every'
DEBUG: Decode '100000' to type 'positiveInteger'
DEBUG: Text decoded to: 100000
DEBUG: Decode '' to type 'neb:control_variablesType'
DEBUG: Decode node 'atomic_species' with path './input/engine/atomic_species'
DEBUG: Decode attributes of element 'atomic_species': [('ntyp', '1')]
DEBUG: Map attribute 'ntyp' to type 'positiveInteger'
DEBUG: Decode node 'species' with path './input/engine/atomic_species/species'
DEBUG: Decode attributes of element 'species': [('name', 'H')]
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode node 'mass' with path './input/engine/atomic_species/species/mass'
DEBUG: Decode '0.10079400000000E+01' to type 'double'
DEBUG: Text decoded to: 1.00794
DEBUG: Decode node 'pseudo_file' with path './input/engine/atomic_species/species/pseudo_file'
DEBUG: Decode 'HUSPBE.RRKJ3' to type 'string'
DEBUG: Text decoded to: HUSPBE.RRKJ3
DEBUG: Decode '' to type 'neb:speciesType'
DEBUG: Decode '' to type 'neb:atomic_speciesType'
DEBUG: Decode node 'atomic_structure' with path './input/engine/atomic_structure'
DEBUG: Decode attributes of element 'atomic_structure': [('alat', '1.200000000000000E+001'), ('nat', '3')]
DEBUG: Map attribute 'alat' to type 'double'
DEBUG: Map attribute 'nat' to type 'positiveInteger'
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.456670009000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-4.56670009, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.1557766760000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [1.55776676, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Decode '' to type 'neb:atomic_structureType'
DEBUG: Decode node 'atomic_structure' with path './input/engine/atomic_structure'
DEBUG: Decode attributes of element 'atomic_structure': [('alat', '1.200000000000000E+001'), ('nat', '3')]
DEBUG: Map attribute 'alat' to type 'double'
DEBUG: Map attribute 'nat' to type 'positiveInteger'
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.155776676000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-1.55776676, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.4566700090000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [4.56670009, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Decode '' to type 'neb:atomic_structureType'
DEBUG: Decode node 'dft' with path './input/engine/dft'
DEBUG: Decode node 'functional' with path './input/engine/dft/functional'
DEBUG: Decode 'PBE' to type 'neb:functionalType'
DEBUG: Text decoded to: PBE
DEBUG: Decode '' to type 'neb:dftType'
DEBUG: Decode node 'spin' with path './input/engine/spin'
DEBUG: Decode node 'lsda' with path './input/engine/spin/lsda'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Decode node 'noncolin' with path './input/engine/spin/noncolin'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'spinorbit' with path './input/engine/spin/spinorbit'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:spinType'
DEBUG: Decode node 'bands' with path './input/engine/bands'
DEBUG: Decode node 'smearing' with path './input/engine/bands/smearing'
DEBUG: Decode attributes of element 'smearing': [('degauss', '3.0000000000E-002')]
DEBUG: Map attribute 'degauss' to type 'double'
DEBUG: Decode 'gaussian' to type 'neb:smearingType'
DEBUG: Text decoded to: gaussian
DEBUG: Decode node 'tot_charge' with path './input/engine/bands/tot_charge'
DEBUG: Decode '0.000000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Decode node 'occupations' with path './input/engine/bands/occupations'
DEBUG: Decode 'smearing' to type 'neb:occupationsType'
DEBUG: Text decoded to: smearing
DEBUG: Decode '' to type 'neb:bandsType'
DEBUG: Decode node 'basis' with path './input/engine/basis'
DEBUG: Decode node 'gamma_only' with path './input/engine/basis/gamma_only'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Decode node 'ecutwfc' with path './input/engine/basis/ecutwfc'
DEBUG: Decode '0.10000000000000E+02' to type 'double'
DEBUG: Text decoded to: 10.0
DEBUG: Decode node 'ecutrho' with path './input/engine/basis/ecutrho'
DEBUG: Decode '0.50000000000000E+02' to type 'double'
DEBUG: Text decoded to: 50.0
DEBUG: Decode '' to type 'neb:basisType'
DEBUG: Decode node 'electron_control' with path './input/engine/electron_control'
DEBUG: Decode node 'diagonalization' with path './input/engine/electron_control/diagonalization'
DEBUG: Decode 'davidson' to type 'neb:diagoType'
DEBUG: Text decoded to: davidson
DEBUG: Decode node 'mixing_mode' with path './input/engine/electron_control/mixing_mode'
DEBUG: Decode 'plain' to type 'neb:mixingModeType'
DEBUG: Text decoded to: plain
DEBUG: Decode node 'mixing_beta' with path './input/engine/electron_control/mixing_beta'
DEBUG: Decode '0.300000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Decode node 'conv_thr' with path './input/engine/electron_control/conv_thr'
DEBUG: Decode '0.10000000000000E-07' to type 'double'
DEBUG: Text decoded to: 1e-08
DEBUG: Decode node 'mixing_ndim' with path './input/engine/electron_control/mixing_ndim'
DEBUG: Decode '8' to type 'positiveInteger'
DEBUG: Text decoded to: 8
DEBUG: Decode node 'max_nstep' with path './input/engine/electron_control/max_nstep'
DEBUG: Decode '100' to type 'positiveInteger'
DEBUG: Text decoded to: 100
DEBUG: Decode node 'real_space_q' with path './input/engine/electron_control/real_space_q'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'tq_smoothing' with path './input/engine/electron_control/tq_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'tbeta_smoothing' with path './input/engine/electron_control/tbeta_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'diago_thr_init' with path './input/engine/electron_control/diago_thr_init'
DEBUG: Decode '0.0000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Decode node 'diago_full_acc' with path './input/engine/electron_control/diago_full_acc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'diago_cg_maxiter' with path './input/engine/electron_control/diago_cg_maxiter'
DEBUG: Decode '100' to type 'nonNegativeInteger'
DEBUG: Text decoded to: 100
DEBUG: Decode '' to type 'neb:electron_controlType'
DEBUG: Decode node 'k_points_IBZ' with path './input/engine/k_points_IBZ'
DEBUG: Decode node 'nk' with path './input/engine/k_points_IBZ/nk'
DEBUG: Decode '1' to type 'positiveInteger'
DEBUG: Text decoded to: 1
DEBUG: Decode node 'k_point' with path './input/engine/k_points_IBZ/k_point'
DEBUG: Decode attributes of element 'k_point': [('weight', '1.0000000000000000000E+00')]
DEBUG: Map attribute 'weight' to type 'double'
DEBUG: Decode '0.000000000000000E+00 0.00000000000000E+00 0.0000000000000E+00' to type 'neb:k_pointType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:k_points_IBZType'
DEBUG: Decode node 'ion_control' with path './input/engine/ion_control'
DEBUG: Decode '' to type 'neb:ion_controlType'
DEBUG: Text decoded to: 
DEBUG: Decode node 'cell_control' with path './input/engine/cell_control'
DEBUG: Decode '' to type 'neb:cell_controlType'
DEBUG: Text decoded to: 
DEBUG: Decode node 'symmetry_flags' with path './input/engine/symmetry_flags'
DEBUG: Decode node 'nosym' with path './input/engine/symmetry_flags/nosym'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'nosym_evc' with path './input/engine/symmetry_flags/nosym_evc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'noinv' with path './input/engine/symmetry_flags/noinv'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'no_t_rev' with path './input/engine/symmetry_flags/no_t_rev'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'force_symmorphic' with path './input/engine/symmetry_flags/force_symmorphic'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'use_all_frac' with path './input/engine/symmetry_flags/use_all_frac'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:symmetry_flagsType'
DEBUG: Decode '' to type 'neb:engineInputType'
DEBUG: Decode '' to type 'neb:nebInputType'
DEBUG: Add input for node 'input' with dict '{'input': {'engine': {'symmetry_flags': {'force_symmorphic': False, 'nosym_evc': False, 'noinv': False, 'use_all_frac': False, 'nosym': False, 'no_t_rev': False}, 'basis': {'ecutwfc': 10.0, 'gamma_only': True, 'ecutrho': 50.0}, 'bands': {'smearing': {'degauss': 0.03, '_text': 'gaussian'}, 'tot_charge': 0.0, 'occupations': 'smearing'}, 'k_points_IBZ': {'k_point': {'weight': 1.0, '_text': [0.0, 0.0, 0.0]}, 'nk': 1}, 'electron_control': {'tq_smoothing': False, 'conv_thr': 1e-08, 'diago_thr_init': 0.0, 'diago_full_acc': False, 'max_nstep': 100, 'diago_cg_maxiter': 100, 'mixing_ndim': 8, 'mixing_mode': 'plain', 'diagonalization': 'davidson', 'tbeta_smoothing': False, 'mixing_beta': 0.3, 'real_space_q': False}, 'ion_control': '', 'dft': {'functional': 'PBE'}, 'control_variables': {'stress': False, 'disk_io': 'low', 'wf_collect': False, 'title': '', 'calculation': 'scf', 'verbosity': 'low', 'pseudo_dir': '/scratch/pdelugas/espresso/pseudo', 'print_every': 100000, 'forc_conv_thr': 0.001, 'prefix': 'H2+H', 'max_seconds': 10000000, 'forces': False, 'etot_conv_thr': 0.0001, 'restart_mode': 'from_scratch', 'press_conv_thr': 0.5, 'outdir': '/scratch/pdelugas/espresso/tempdir'}, 'atomic_structure': [{'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}, 'nat': 3}, {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}], 'cell_control': '', 'spin': {'noncolin': False, 'spinorbit': False, 'lsda': True}, 'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}, 'path': {'elasticConstMin': 0.2, 'stringMethod': 'neb', 'pathNstep': 20, 'pathThreshold': 0.1, 'useFreezingFlag': False, 'useMassesFlag': False, 'elasticConstMax': 0.3, 'minimumImageFlag': False, 'climbingImage': 'auto', 'restart_mode': 'from_scratch', 'optimizationStepLength': 2.0, 'optimizationScheme': 'broyden', 'numOfImages': 7, 'endImagesOptimizationFlag': False}}}'
DEBUG: Convert element './input'
DEBUG: Element's path '.' not in converter!
DEBUG: Decode node 'path' with path './input/path'
DEBUG: Decode node 'stringMethod' with path './input/path/stringMethod'
DEBUG: Decode 'neb' to type 'neb:stringMethodType'
DEBUG: Text decoded to: neb
DEBUG: Decode node 'restart_mode' with path './input/path/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Decode node 'pathNstep' with path './input/path/pathNstep'
DEBUG: Decode '20' to type 'positiveInteger'
DEBUG: Text decoded to: 20
DEBUG: Decode node 'numOfImages' with path './input/path/numOfImages'
DEBUG: Decode '7' to type 'positiveInteger'
DEBUG: Text decoded to: 7
DEBUG: Decode node 'optimizationScheme' with path './input/path/optimizationScheme'
DEBUG: Decode 'broyden' to type 'neb:optimizationSchemeType'
DEBUG: Text decoded to: broyden
DEBUG: Decode node 'climbingImage' with path './input/path/climbingImage'
DEBUG: Decode 'auto' to type 'neb:climbingImageType'
DEBUG: Text decoded to: auto
DEBUG: Decode node 'endImagesOptimizationFlag' with path './input/path/endImagesOptimizationFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'minimumImageFlag' with path './input/path/minimumImageFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'optimizationStepLength' with path './input/path/optimizationStepLength'
DEBUG: Decode '2.000E+00' to type 'double'
DEBUG: Text decoded to: 2.0
DEBUG: Decode node 'pathThreshold' with path './input/path/pathThreshold'
DEBUG: Decode '0.10' to type 'double'
DEBUG: Text decoded to: 0.1
DEBUG: Decode node 'elasticConstMax' with path './input/path/elasticConstMax'
DEBUG: Decode '0.30' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Decode node 'elasticConstMin' with path './input/path/elasticConstMin'
DEBUG: Decode '0.20' to type 'double'
DEBUG: Text decoded to: 0.2
DEBUG: Decode node 'useMassesFlag' with path './input/path/useMassesFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'useFreezingFlag' with path './input/path/useFreezingFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:pathInputType'
DEBUG: Add input for node 'path' with dict '{'path': {'elasticConstMin': 0.2, 'stringMethod': 'neb', 'pathNstep': 20, 'pathThreshold': 0.1, 'useFreezingFlag': False, 'useMassesFlag': False, 'elasticConstMax': 0.3, 'minimumImageFlag': False, 'climbingImage': 'auto', 'restart_mode': 'from_scratch', 'optimizationStepLength': 2.0, 'optimizationScheme': 'broyden', 'numOfImages': 7, 'endImagesOptimizationFlag': False}}'
DEBUG: Convert element './input/path'
DEBUG: Element's path './path' not in converter!
DEBUG: Decode node 'stringMethod' with path './input/path/stringMethod'
DEBUG: Decode 'neb' to type 'neb:stringMethodType'
DEBUG: Text decoded to: neb
DEBUG: Add input for node 'stringMethod' with dict '{'stringMethod': 'neb'}'
DEBUG: Convert element './input/path/stringMethod'
DEBUG: Set input with path './path/stringMethod' and node dict '{'stringMethod': 'neb'}'
DEBUG: Set PATH[string_method]='neb'
DEBUG: Decode node 'restart_mode' with path './input/path/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Add input for node 'restart_mode' with dict '{'restart_mode': 'from_scratch'}'
DEBUG: Convert element './input/path/restart_mode'
DEBUG: Element's path './path/restart_mode' not in converter!
DEBUG: Decode node 'pathNstep' with path './input/path/pathNstep'
DEBUG: Decode '20' to type 'positiveInteger'
DEBUG: Text decoded to: 20
DEBUG: Add input for node 'pathNstep' with dict '{'pathNstep': 20}'
DEBUG: Convert element './input/path/pathNstep'
DEBUG: Set input with path './path/pathNstep' and node dict '{'pathNstep': 20}'
DEBUG: Set PATH[nstep_path]=20
DEBUG: Decode node 'numOfImages' with path './input/path/numOfImages'
DEBUG: Decode '7' to type 'positiveInteger'
DEBUG: Text decoded to: 7
DEBUG: Add input for node 'numOfImages' with dict '{'numOfImages': 7}'
DEBUG: Convert element './input/path/numOfImages'
DEBUG: Set input with path './path/numOfImages' and node dict '{'numOfImages': 7}'
DEBUG: Set PATH[num_of_images]=7
DEBUG: Decode node 'optimizationScheme' with path './input/path/optimizationScheme'
DEBUG: Decode 'broyden' to type 'neb:optimizationSchemeType'
DEBUG: Text decoded to: broyden
DEBUG: Add input for node 'optimizationScheme' with dict '{'optimizationScheme': 'broyden'}'
DEBUG: Convert element './input/path/optimizationScheme'
DEBUG: Set input with path './path/optimizationScheme' and node dict '{'optimizationScheme': 'broyden'}'
DEBUG: Set PATH[opt_scheme]='broyden'
DEBUG: Decode node 'climbingImage' with path './input/path/climbingImage'
DEBUG: Decode 'auto' to type 'neb:climbingImageType'
DEBUG: Text decoded to: auto
DEBUG: Add input for node 'climbingImage' with dict '{'climbingImage': 'auto'}'
DEBUG: Convert element './input/path/climbingImage'
DEBUG: Set input with path './path/climbingImage' and node dict '{'climbingImage': 'auto'}'
DEBUG: Set PATH[CI_scheme]='auto'
DEBUG: Add argument to 'CLIMBING_IMAGES'
DEBUG: Argument's conversion function: <function get_climbing_images at 0x7f2e8c744b90>
DEBUG: Decode node 'endImagesOptimizationFlag' with path './input/path/endImagesOptimizationFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'endImagesOptimizationFlag' with dict '{'endImagesOptimizationFlag': False}'
DEBUG: Convert element './input/path/endImagesOptimizationFlag'
DEBUG: Element's path './path/endImagesOptimizationFlag' not in converter!
DEBUG: Decode node 'minimumImageFlag' with path './input/path/minimumImageFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'minimumImageFlag' with dict '{'minimumImageFlag': False}'
DEBUG: Convert element './input/path/minimumImageFlag'
DEBUG: Element's path './path/minimumImageFlag' not in converter!
DEBUG: Decode node 'optimizationStepLength' with path './input/path/optimizationStepLength'
DEBUG: Decode '2.000E+00' to type 'double'
DEBUG: Text decoded to: 2.0
DEBUG: Add input for node 'optimizationStepLength' with dict '{'optimizationStepLength': 2.0}'
DEBUG: Convert element './input/path/optimizationStepLength'
DEBUG: Element's path './path/optimizationStepLength' not in converter!
DEBUG: Decode node 'pathThreshold' with path './input/path/pathThreshold'
DEBUG: Decode '0.10' to type 'double'
DEBUG: Text decoded to: 0.1
DEBUG: Add input for node 'pathThreshold' with dict '{'pathThreshold': 0.1}'
DEBUG: Convert element './input/path/pathThreshold'
DEBUG: Element's path './path/pathThreshold' not in converter!
DEBUG: Decode node 'elasticConstMax' with path './input/path/elasticConstMax'
DEBUG: Decode '0.30' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Add input for node 'elasticConstMax' with dict '{'elasticConstMax': 0.3}'
DEBUG: Convert element './input/path/elasticConstMax'
DEBUG: Element's path './path/elasticConstMax' not in converter!
DEBUG: Decode node 'elasticConstMin' with path './input/path/elasticConstMin'
DEBUG: Decode '0.20' to type 'double'
DEBUG: Text decoded to: 0.2
DEBUG: Add input for node 'elasticConstMin' with dict '{'elasticConstMin': 0.2}'
DEBUG: Convert element './input/path/elasticConstMin'
DEBUG: Element's path './path/elasticConstMin' not in converter!
DEBUG: Decode node 'useMassesFlag' with path './input/path/useMassesFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'useMassesFlag' with dict '{'useMassesFlag': False}'
DEBUG: Convert element './input/path/useMassesFlag'
DEBUG: Set input with path './path/useMassesFlag' and node dict '{'useMassesFlag': False}'
DEBUG: Set PATH[use_masses]=.false.
DEBUG: Decode node 'useFreezingFlag' with path './input/path/useFreezingFlag'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'useFreezingFlag' with dict '{'useFreezingFlag': False}'
DEBUG: Convert element './input/path/useFreezingFlag'
DEBUG: Set input with path './path/useFreezingFlag' and node dict '{'useFreezingFlag': False}'
DEBUG: Set PATH[use_freezing]=.false.
DEBUG: Decode node 'engine' with path './input/engine'
DEBUG: Decode node 'control_variables' with path './input/engine/control_variables'
DEBUG: Decode node 'title' with path './input/engine/control_variables/title'
DEBUG: Decode '' to type 'string'
DEBUG: Text decoded to: 
DEBUG: Decode node 'calculation' with path './input/engine/control_variables/calculation'
DEBUG: Decode 'scf' to type 'neb:calculationType'
DEBUG: Text decoded to: scf
DEBUG: Decode node 'restart_mode' with path './input/engine/control_variables/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Decode node 'prefix' with path './input/engine/control_variables/prefix'
DEBUG: Decode 'H2+H' to type 'string'
DEBUG: Text decoded to: H2+H
DEBUG: Decode node 'pseudo_dir' with path './input/engine/control_variables/pseudo_dir'
DEBUG: Decode '/scratch/pdelugas/espresso/pseudo' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/pseudo
DEBUG: Decode node 'outdir' with path './input/engine/control_variables/outdir'
DEBUG: Decode '/scratch/pdelugas/espresso/tempdir' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/tempdir
DEBUG: Decode node 'stress' with path './input/engine/control_variables/stress'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'forces' with path './input/engine/control_variables/forces'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'wf_collect' with path './input/engine/control_variables/wf_collect'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'disk_io' with path './input/engine/control_variables/disk_io'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Decode node 'max_seconds' with path './input/engine/control_variables/max_seconds'
DEBUG: Decode '10000000' to type 'positiveInteger'
DEBUG: Text decoded to: 10000000
DEBUG: Decode node 'etot_conv_thr' with path './input/engine/control_variables/etot_conv_thr'
DEBUG: Decode '0.1000000000000E-03' to type 'double'
DEBUG: Text decoded to: 0.0001
DEBUG: Decode node 'forc_conv_thr' with path './input/engine/control_variables/forc_conv_thr'
DEBUG: Decode '0.1000000000000E-02' to type 'double'
DEBUG: Text decoded to: 0.001
DEBUG: Decode node 'press_conv_thr' with path './input/engine/control_variables/press_conv_thr'
DEBUG: Decode '5.00000000E-01' to type 'double'
DEBUG: Text decoded to: 0.5
DEBUG: Decode node 'verbosity' with path './input/engine/control_variables/verbosity'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Decode node 'print_every' with path './input/engine/control_variables/print_every'
DEBUG: Decode '100000' to type 'positiveInteger'
DEBUG: Text decoded to: 100000
DEBUG: Decode '' to type 'neb:control_variablesType'
DEBUG: Decode node 'atomic_species' with path './input/engine/atomic_species'
DEBUG: Decode attributes of element 'atomic_species': [('ntyp', '1')]
DEBUG: Map attribute 'ntyp' to type 'positiveInteger'
DEBUG: Decode node 'species' with path './input/engine/atomic_species/species'
DEBUG: Decode attributes of element 'species': [('name', 'H')]
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode node 'mass' with path './input/engine/atomic_species/species/mass'
DEBUG: Decode '0.10079400000000E+01' to type 'double'
DEBUG: Text decoded to: 1.00794
DEBUG: Decode node 'pseudo_file' with path './input/engine/atomic_species/species/pseudo_file'
DEBUG: Decode 'HUSPBE.RRKJ3' to type 'string'
DEBUG: Text decoded to: HUSPBE.RRKJ3
DEBUG: Decode '' to type 'neb:speciesType'
DEBUG: Decode '' to type 'neb:atomic_speciesType'
DEBUG: Decode node 'atomic_structure' with path './input/engine/atomic_structure'
DEBUG: Decode attributes of element 'atomic_structure': [('alat', '1.200000000000000E+001'), ('nat', '3')]
DEBUG: Map attribute 'alat' to type 'double'
DEBUG: Map attribute 'nat' to type 'positiveInteger'
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.456670009000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-4.56670009, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.1557766760000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [1.55776676, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Decode '' to type 'neb:atomic_structureType'
DEBUG: Decode node 'atomic_structure' with path './input/engine/atomic_structure'
DEBUG: Decode attributes of element 'atomic_structure': [('alat', '1.200000000000000E+001'), ('nat', '3')]
DEBUG: Map attribute 'alat' to type 'double'
DEBUG: Map attribute 'nat' to type 'positiveInteger'
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.155776676000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-1.55776676, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.4566700090000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [4.56670009, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Decode '' to type 'neb:atomic_structureType'
DEBUG: Decode node 'dft' with path './input/engine/dft'
DEBUG: Decode node 'functional' with path './input/engine/dft/functional'
DEBUG: Decode 'PBE' to type 'neb:functionalType'
DEBUG: Text decoded to: PBE
DEBUG: Decode '' to type 'neb:dftType'
DEBUG: Decode node 'spin' with path './input/engine/spin'
DEBUG: Decode node 'lsda' with path './input/engine/spin/lsda'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Decode node 'noncolin' with path './input/engine/spin/noncolin'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'spinorbit' with path './input/engine/spin/spinorbit'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:spinType'
DEBUG: Decode node 'bands' with path './input/engine/bands'
DEBUG: Decode node 'smearing' with path './input/engine/bands/smearing'
DEBUG: Decode attributes of element 'smearing': [('degauss', '3.0000000000E-002')]
DEBUG: Map attribute 'degauss' to type 'double'
DEBUG: Decode 'gaussian' to type 'neb:smearingType'
DEBUG: Text decoded to: gaussian
DEBUG: Decode node 'tot_charge' with path './input/engine/bands/tot_charge'
DEBUG: Decode '0.000000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Decode node 'occupations' with path './input/engine/bands/occupations'
DEBUG: Decode 'smearing' to type 'neb:occupationsType'
DEBUG: Text decoded to: smearing
DEBUG: Decode '' to type 'neb:bandsType'
DEBUG: Decode node 'basis' with path './input/engine/basis'
DEBUG: Decode node 'gamma_only' with path './input/engine/basis/gamma_only'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Decode node 'ecutwfc' with path './input/engine/basis/ecutwfc'
DEBUG: Decode '0.10000000000000E+02' to type 'double'
DEBUG: Text decoded to: 10.0
DEBUG: Decode node 'ecutrho' with path './input/engine/basis/ecutrho'
DEBUG: Decode '0.50000000000000E+02' to type 'double'
DEBUG: Text decoded to: 50.0
DEBUG: Decode '' to type 'neb:basisType'
DEBUG: Decode node 'electron_control' with path './input/engine/electron_control'
DEBUG: Decode node 'diagonalization' with path './input/engine/electron_control/diagonalization'
DEBUG: Decode 'davidson' to type 'neb:diagoType'
DEBUG: Text decoded to: davidson
DEBUG: Decode node 'mixing_mode' with path './input/engine/electron_control/mixing_mode'
DEBUG: Decode 'plain' to type 'neb:mixingModeType'
DEBUG: Text decoded to: plain
DEBUG: Decode node 'mixing_beta' with path './input/engine/electron_control/mixing_beta'
DEBUG: Decode '0.300000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Decode node 'conv_thr' with path './input/engine/electron_control/conv_thr'
DEBUG: Decode '0.10000000000000E-07' to type 'double'
DEBUG: Text decoded to: 1e-08
DEBUG: Decode node 'mixing_ndim' with path './input/engine/electron_control/mixing_ndim'
DEBUG: Decode '8' to type 'positiveInteger'
DEBUG: Text decoded to: 8
DEBUG: Decode node 'max_nstep' with path './input/engine/electron_control/max_nstep'
DEBUG: Decode '100' to type 'positiveInteger'
DEBUG: Text decoded to: 100
DEBUG: Decode node 'real_space_q' with path './input/engine/electron_control/real_space_q'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'tq_smoothing' with path './input/engine/electron_control/tq_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'tbeta_smoothing' with path './input/engine/electron_control/tbeta_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'diago_thr_init' with path './input/engine/electron_control/diago_thr_init'
DEBUG: Decode '0.0000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Decode node 'diago_full_acc' with path './input/engine/electron_control/diago_full_acc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'diago_cg_maxiter' with path './input/engine/electron_control/diago_cg_maxiter'
DEBUG: Decode '100' to type 'nonNegativeInteger'
DEBUG: Text decoded to: 100
DEBUG: Decode '' to type 'neb:electron_controlType'
DEBUG: Decode node 'k_points_IBZ' with path './input/engine/k_points_IBZ'
DEBUG: Decode node 'nk' with path './input/engine/k_points_IBZ/nk'
DEBUG: Decode '1' to type 'positiveInteger'
DEBUG: Text decoded to: 1
DEBUG: Decode node 'k_point' with path './input/engine/k_points_IBZ/k_point'
DEBUG: Decode attributes of element 'k_point': [('weight', '1.0000000000000000000E+00')]
DEBUG: Map attribute 'weight' to type 'double'
DEBUG: Decode '0.000000000000000E+00 0.00000000000000E+00 0.0000000000000E+00' to type 'neb:k_pointType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:k_points_IBZType'
DEBUG: Decode node 'ion_control' with path './input/engine/ion_control'
DEBUG: Decode '' to type 'neb:ion_controlType'
DEBUG: Text decoded to: 
DEBUG: Decode node 'cell_control' with path './input/engine/cell_control'
DEBUG: Decode '' to type 'neb:cell_controlType'
DEBUG: Text decoded to: 
DEBUG: Decode node 'symmetry_flags' with path './input/engine/symmetry_flags'
DEBUG: Decode node 'nosym' with path './input/engine/symmetry_flags/nosym'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'nosym_evc' with path './input/engine/symmetry_flags/nosym_evc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'noinv' with path './input/engine/symmetry_flags/noinv'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'no_t_rev' with path './input/engine/symmetry_flags/no_t_rev'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'force_symmorphic' with path './input/engine/symmetry_flags/force_symmorphic'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'use_all_frac' with path './input/engine/symmetry_flags/use_all_frac'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:symmetry_flagsType'
DEBUG: Decode '' to type 'neb:engineInputType'
DEBUG: Add input for node 'engine' with dict '{'engine': {'symmetry_flags': {'force_symmorphic': False, 'nosym_evc': False, 'noinv': False, 'use_all_frac': False, 'nosym': False, 'no_t_rev': False}, 'basis': {'ecutwfc': 10.0, 'gamma_only': True, 'ecutrho': 50.0}, 'bands': {'smearing': {'degauss': 0.03, '_text': 'gaussian'}, 'tot_charge': 0.0, 'occupations': 'smearing'}, 'k_points_IBZ': {'k_point': {'weight': 1.0, '_text': [0.0, 0.0, 0.0]}, 'nk': 1}, 'electron_control': {'tq_smoothing': False, 'conv_thr': 1e-08, 'diago_thr_init': 0.0, 'diago_full_acc': False, 'max_nstep': 100, 'diago_cg_maxiter': 100, 'mixing_ndim': 8, 'mixing_mode': 'plain', 'diagonalization': 'davidson', 'tbeta_smoothing': False, 'mixing_beta': 0.3, 'real_space_q': False}, 'ion_control': '', 'dft': {'functional': 'PBE'}, 'control_variables': {'stress': False, 'disk_io': 'low', 'wf_collect': False, 'title': '', 'calculation': 'scf', 'verbosity': 'low', 'pseudo_dir': '/scratch/pdelugas/espresso/pseudo', 'print_every': 100000, 'forc_conv_thr': 0.001, 'prefix': 'H2+H', 'max_seconds': 10000000, 'forces': False, 'etot_conv_thr': 0.0001, 'restart_mode': 'from_scratch', 'press_conv_thr': 0.5, 'outdir': '/scratch/pdelugas/espresso/tempdir'}, 'atomic_structure': [{'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}, 'nat': 3}, {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}], 'cell_control': '', 'spin': {'noncolin': False, 'spinorbit': False, 'lsda': True}, 'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}}'
DEBUG: Convert element './input/engine'
DEBUG: Element's path './engine' not in converter!
DEBUG: Decode node 'control_variables' with path './input/engine/control_variables'
DEBUG: Decode node 'title' with path './input/engine/control_variables/title'
DEBUG: Decode '' to type 'string'
DEBUG: Text decoded to: 
DEBUG: Decode node 'calculation' with path './input/engine/control_variables/calculation'
DEBUG: Decode 'scf' to type 'neb:calculationType'
DEBUG: Text decoded to: scf
DEBUG: Decode node 'restart_mode' with path './input/engine/control_variables/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Decode node 'prefix' with path './input/engine/control_variables/prefix'
DEBUG: Decode 'H2+H' to type 'string'
DEBUG: Text decoded to: H2+H
DEBUG: Decode node 'pseudo_dir' with path './input/engine/control_variables/pseudo_dir'
DEBUG: Decode '/scratch/pdelugas/espresso/pseudo' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/pseudo
DEBUG: Decode node 'outdir' with path './input/engine/control_variables/outdir'
DEBUG: Decode '/scratch/pdelugas/espresso/tempdir' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/tempdir
DEBUG: Decode node 'stress' with path './input/engine/control_variables/stress'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'forces' with path './input/engine/control_variables/forces'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'wf_collect' with path './input/engine/control_variables/wf_collect'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'disk_io' with path './input/engine/control_variables/disk_io'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Decode node 'max_seconds' with path './input/engine/control_variables/max_seconds'
DEBUG: Decode '10000000' to type 'positiveInteger'
DEBUG: Text decoded to: 10000000
DEBUG: Decode node 'etot_conv_thr' with path './input/engine/control_variables/etot_conv_thr'
DEBUG: Decode '0.1000000000000E-03' to type 'double'
DEBUG: Text decoded to: 0.0001
DEBUG: Decode node 'forc_conv_thr' with path './input/engine/control_variables/forc_conv_thr'
DEBUG: Decode '0.1000000000000E-02' to type 'double'
DEBUG: Text decoded to: 0.001
DEBUG: Decode node 'press_conv_thr' with path './input/engine/control_variables/press_conv_thr'
DEBUG: Decode '5.00000000E-01' to type 'double'
DEBUG: Text decoded to: 0.5
DEBUG: Decode node 'verbosity' with path './input/engine/control_variables/verbosity'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Decode node 'print_every' with path './input/engine/control_variables/print_every'
DEBUG: Decode '100000' to type 'positiveInteger'
DEBUG: Text decoded to: 100000
DEBUG: Decode '' to type 'neb:control_variablesType'
DEBUG: Add input for node 'control_variables' with dict '{'control_variables': {'stress': False, 'disk_io': 'low', 'wf_collect': False, 'title': '', 'calculation': 'scf', 'verbosity': 'low', 'pseudo_dir': '/scratch/pdelugas/espresso/pseudo', 'print_every': 100000, 'forc_conv_thr': 0.001, 'prefix': 'H2+H', 'max_seconds': 10000000, 'forces': False, 'etot_conv_thr': 0.0001, 'restart_mode': 'from_scratch', 'press_conv_thr': 0.5, 'outdir': '/scratch/pdelugas/espresso/tempdir'}}'
DEBUG: Convert element './input/engine/control_variables'
DEBUG: Element's path './engine/control_variables' not in converter!
DEBUG: Decode node 'title' with path './input/engine/control_variables/title'
DEBUG: Decode '' to type 'string'
DEBUG: Text decoded to: 
DEBUG: Add input for node 'title' with dict '{'title': ''}'
DEBUG: Convert element './input/engine/control_variables/title'
DEBUG: Set input with path './engine/control_variables/title' and node dict '{'title': ''}'
DEBUG: Set CONTROL[title]=''
DEBUG: Decode node 'calculation' with path './input/engine/control_variables/calculation'
DEBUG: Decode 'scf' to type 'neb:calculationType'
DEBUG: Text decoded to: scf
DEBUG: Add input for node 'calculation' with dict '{'calculation': 'scf'}'
DEBUG: Convert element './input/engine/control_variables/calculation'
DEBUG: Set input with path './engine/control_variables/calculation' and node dict '{'calculation': 'scf'}'
DEBUG: Set CONTROL[calculation]='scf'
DEBUG: Decode node 'restart_mode' with path './input/engine/control_variables/restart_mode'
DEBUG: Decode 'from_scratch' to type 'neb:controlRestartModeType'
DEBUG: Text decoded to: from_scratch
DEBUG: Add input for node 'restart_mode' with dict '{'restart_mode': 'from_scratch'}'
DEBUG: Convert element './input/engine/control_variables/restart_mode'
DEBUG: Set input with path './engine/control_variables/restart_mode' and node dict '{'restart_mode': 'from_scratch'}'
DEBUG: Set CONTROL[restart_mode]='from_scratch'
DEBUG: Decode node 'prefix' with path './input/engine/control_variables/prefix'
DEBUG: Decode 'H2+H' to type 'string'
DEBUG: Text decoded to: H2+H
DEBUG: Add input for node 'prefix' with dict '{'prefix': 'H2+H'}'
DEBUG: Convert element './input/engine/control_variables/prefix'
DEBUG: Set input with path './engine/control_variables/prefix' and node dict '{'prefix': 'H2+H'}'
DEBUG: Set CONTROL[prefix]='H2+H'
DEBUG: Decode node 'pseudo_dir' with path './input/engine/control_variables/pseudo_dir'
DEBUG: Decode '/scratch/pdelugas/espresso/pseudo' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/pseudo
DEBUG: Add input for node 'pseudo_dir' with dict '{'pseudo_dir': '/scratch/pdelugas/espresso/pseudo'}'
DEBUG: Convert element './input/engine/control_variables/pseudo_dir'
DEBUG: Set input with path './engine/control_variables/pseudo_dir' and node dict '{'pseudo_dir': '/scratch/pdelugas/espresso/pseudo'}'
DEBUG: Set CONTROL[pseudo_dir]='/scratch/pdelugas/espresso/pseudo'
DEBUG: Decode node 'outdir' with path './input/engine/control_variables/outdir'
DEBUG: Decode '/scratch/pdelugas/espresso/tempdir' to type 'string'
DEBUG: Text decoded to: /scratch/pdelugas/espresso/tempdir
DEBUG: Add input for node 'outdir' with dict '{'outdir': '/scratch/pdelugas/espresso/tempdir'}'
DEBUG: Convert element './input/engine/control_variables/outdir'
DEBUG: Set input with path './engine/control_variables/outdir' and node dict '{'outdir': '/scratch/pdelugas/espresso/tempdir'}'
DEBUG: Set CONTROL[outdir]='/scratch/pdelugas/espresso/tempdir'
DEBUG: Decode node 'stress' with path './input/engine/control_variables/stress'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'stress' with dict '{'stress': False}'
DEBUG: Convert element './input/engine/control_variables/stress'
DEBUG: Set input with path './engine/control_variables/stress' and node dict '{'stress': False}'
DEBUG: Set CONTROL[tstress]=.false.
DEBUG: Decode node 'forces' with path './input/engine/control_variables/forces'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'forces' with dict '{'forces': False}'
DEBUG: Convert element './input/engine/control_variables/forces'
DEBUG: Set input with path './engine/control_variables/forces' and node dict '{'forces': False}'
DEBUG: Set CONTROL[tprnfor]=.false.
DEBUG: Decode node 'wf_collect' with path './input/engine/control_variables/wf_collect'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'wf_collect' with dict '{'wf_collect': False}'
DEBUG: Convert element './input/engine/control_variables/wf_collect'
DEBUG: Set input with path './engine/control_variables/wf_collect' and node dict '{'wf_collect': False}'
DEBUG: Set CONTROL[wf_collect]=.false.
DEBUG: Decode node 'disk_io' with path './input/engine/control_variables/disk_io'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Add input for node 'disk_io' with dict '{'disk_io': 'low'}'
DEBUG: Convert element './input/engine/control_variables/disk_io'
DEBUG: Set input with path './engine/control_variables/disk_io' and node dict '{'disk_io': 'low'}'
DEBUG: Set CONTROL[disk_io]='low'
DEBUG: Decode node 'max_seconds' with path './input/engine/control_variables/max_seconds'
DEBUG: Decode '10000000' to type 'positiveInteger'
DEBUG: Text decoded to: 10000000
DEBUG: Add input for node 'max_seconds' with dict '{'max_seconds': 10000000}'
DEBUG: Convert element './input/engine/control_variables/max_seconds'
DEBUG: Set input with path './engine/control_variables/max_seconds' and node dict '{'max_seconds': 10000000}'
DEBUG: Set CONTROL[max_seconds]=10000000
DEBUG: Decode node 'etot_conv_thr' with path './input/engine/control_variables/etot_conv_thr'
DEBUG: Decode '0.1000000000000E-03' to type 'double'
DEBUG: Text decoded to: 0.0001
DEBUG: Add input for node 'etot_conv_thr' with dict '{'etot_conv_thr': 0.0001}'
DEBUG: Convert element './input/engine/control_variables/etot_conv_thr'
DEBUG: Set input with path './engine/control_variables/etot_conv_thr' and node dict '{'etot_conv_thr': 0.0001}'
DEBUG: Set CONTROL[etot_conv_thr]=0.0001
DEBUG: Decode node 'forc_conv_thr' with path './input/engine/control_variables/forc_conv_thr'
DEBUG: Decode '0.1000000000000E-02' to type 'double'
DEBUG: Text decoded to: 0.001
DEBUG: Add input for node 'forc_conv_thr' with dict '{'forc_conv_thr': 0.001}'
DEBUG: Convert element './input/engine/control_variables/forc_conv_thr'
DEBUG: Set input with path './engine/control_variables/forc_conv_thr' and node dict '{'forc_conv_thr': 0.001}'
DEBUG: Set CONTROL[forc_conv_thr]=0.001
DEBUG: Decode node 'press_conv_thr' with path './input/engine/control_variables/press_conv_thr'
DEBUG: Decode '5.00000000E-01' to type 'double'
DEBUG: Text decoded to: 0.5
DEBUG: Add input for node 'press_conv_thr' with dict '{'press_conv_thr': 0.5}'
DEBUG: Convert element './input/engine/control_variables/press_conv_thr'
DEBUG: Set input with path './engine/control_variables/press_conv_thr' and node dict '{'press_conv_thr': 0.5}'
DEBUG: Set CELL[press_conv_thr]=0.5
DEBUG: Decode node 'verbosity' with path './input/engine/control_variables/verbosity'
DEBUG: Decode 'low' to type 'neb:lowhighType'
DEBUG: Text decoded to: low
DEBUG: Add input for node 'verbosity' with dict '{'verbosity': 'low'}'
DEBUG: Convert element './input/engine/control_variables/verbosity'
DEBUG: Set input with path './engine/control_variables/verbosity' and node dict '{'verbosity': 'low'}'
DEBUG: Set CONTROL[verbosity]='low'
DEBUG: Decode node 'print_every' with path './input/engine/control_variables/print_every'
DEBUG: Decode '100000' to type 'positiveInteger'
DEBUG: Text decoded to: 100000
DEBUG: Add input for node 'print_every' with dict '{'print_every': 100000}'
DEBUG: Convert element './input/engine/control_variables/print_every'
DEBUG: Set input with path './engine/control_variables/print_every' and node dict '{'print_every': 100000}'
DEBUG: Set CONTROL[iprint]=100000
DEBUG: Decode node 'atomic_species' with path './input/engine/atomic_species'
DEBUG: Decode attributes of element 'atomic_species': [('ntyp', '1')]
DEBUG: Map attribute 'ntyp' to type 'positiveInteger'
DEBUG: Decode node 'species' with path './input/engine/atomic_species/species'
DEBUG: Decode attributes of element 'species': [('name', 'H')]
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode node 'mass' with path './input/engine/atomic_species/species/mass'
DEBUG: Decode '0.10079400000000E+01' to type 'double'
DEBUG: Text decoded to: 1.00794
DEBUG: Decode node 'pseudo_file' with path './input/engine/atomic_species/species/pseudo_file'
DEBUG: Decode 'HUSPBE.RRKJ3' to type 'string'
DEBUG: Text decoded to: HUSPBE.RRKJ3
DEBUG: Decode '' to type 'neb:speciesType'
DEBUG: Decode '' to type 'neb:atomic_speciesType'
DEBUG: Add input for node 'atomic_species' with dict '{'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}'
DEBUG: Convert attribute 'ntyp' of element './input/engine/atomic_species'
DEBUG: Set input with path './engine/atomic_species/ntyp' and node dict '{'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}'
DEBUG: Set SYSTEM[ntyp]=1
DEBUG: Convert element './input/engine/atomic_species'
DEBUG: Set input with path './engine/atomic_species/_text' and node dict '{'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}'
DEBUG: Add argument to 'ATOMIC_SPECIES'
DEBUG: Argument's conversion function: <function get_atomic_species_card at 0x7f2e8c744848>
DEBUG: Add argument to 'SYSTEM[Hubbard_U]'
DEBUG: Argument's conversion function: None
DEBUG: Add argument to 'SYSTEM[Hubbard_J0]'
DEBUG: Argument's conversion function: None
DEBUG: Add argument to 'SYSTEM[Hubbard_alpha]'
DEBUG: Argument's conversion function: None
DEBUG: Add argument to 'SYSTEM[Hubbard_beta]'
DEBUG: Argument's conversion function: None
DEBUG: Add argument to 'SYSTEM[Hubbard_J]'
DEBUG: Argument's conversion function: None
DEBUG: Add argument to 'SYSTEM[starting_ns_eigenvalue]'
DEBUG: Argument's conversion function: None
DEBUG: Add argument to 'SYSTEM[starting_magnetization]'
DEBUG: Argument's conversion function: <function get_starting_magnetization at 0x7f2e8c744f50>
DEBUG: Decode node 'species' with path './input/engine/atomic_species/species'
DEBUG: Decode attributes of element 'species': [('name', 'H')]
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode node 'mass' with path './input/engine/atomic_species/species/mass'
DEBUG: Decode '0.10079400000000E+01' to type 'double'
DEBUG: Text decoded to: 1.00794
DEBUG: Decode node 'pseudo_file' with path './input/engine/atomic_species/species/pseudo_file'
DEBUG: Decode 'HUSPBE.RRKJ3' to type 'string'
DEBUG: Text decoded to: HUSPBE.RRKJ3
DEBUG: Decode '' to type 'neb:speciesType'
DEBUG: Add input for node 'species' with dict '{'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}'
DEBUG: Convert attribute 'name' of element './input/engine/atomic_species/species'
DEBUG: Attribute's path './engine/atomic_species/species/name' not in converter!
DEBUG: Convert element './input/engine/atomic_species/species'
DEBUG: Element's path './engine/atomic_species/species/_text' not in converter!
DEBUG: Decode node 'mass' with path './input/engine/atomic_species/species/mass'
DEBUG: Decode '0.10079400000000E+01' to type 'double'
DEBUG: Text decoded to: 1.00794
DEBUG: Add input for node 'mass' with dict '{'mass': 1.00794}'
DEBUG: Convert element './input/engine/atomic_species/species/mass'
DEBUG: Element's path './engine/atomic_species/species/mass' not in converter!
DEBUG: Decode node 'pseudo_file' with path './input/engine/atomic_species/species/pseudo_file'
DEBUG: Decode 'HUSPBE.RRKJ3' to type 'string'
DEBUG: Text decoded to: HUSPBE.RRKJ3
DEBUG: Add input for node 'pseudo_file' with dict '{'pseudo_file': 'HUSPBE.RRKJ3'}'
DEBUG: Convert element './input/engine/atomic_species/species/pseudo_file'
DEBUG: Element's path './engine/atomic_species/species/pseudo_file' not in converter!
DEBUG: Decode node 'atomic_structure' with path './input/engine/atomic_structure'
DEBUG: Decode attributes of element 'atomic_structure': [('alat', '1.200000000000000E+001'), ('nat', '3')]
DEBUG: Map attribute 'alat' to type 'double'
DEBUG: Map attribute 'nat' to type 'positiveInteger'
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.456670009000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-4.56670009, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.1557766760000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [1.55776676, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Decode '' to type 'neb:atomic_structureType'
DEBUG: Add input for node 'atomic_structure' with dict '{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}, 'nat': 3}}'
DEBUG: Convert attribute 'alat' of element './input/engine/atomic_structure'
DEBUG: Attribute's path './engine/atomic_structure/alat' not in converter!
DEBUG: Convert attribute 'nat' of element './input/engine/atomic_structure'
DEBUG: Set input with path './engine/atomic_structure/nat' and node dict '{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}, 'nat': 3}}'
DEBUG: Add argument to 'SYSTEM[nat]'
DEBUG: Argument's conversion function: <function neb_set_system_nat at 0x7f2e8c74f410>
DEBUG: Convert element './input/engine/atomic_structure'
DEBUG: Set input with path './engine/atomic_structure/_text' and node dict '{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}, 'nat': 3}}'
DEBUG: Add argument to 'ATOMIC_POSITIONS'
DEBUG: Argument's conversion function: <function get_neb_images_positions_card at 0x7f2e8c744c08>
DEBUG: Add argument to 'CELL_PARAMETERS'
DEBUG: Argument's conversion function: <function get_neb_cell_parameters_card at 0x7f2e8c744c80>
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.456670009000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-4.56670009, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.1557766760000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [1.55776676, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Add input for node 'atomic_positions' with dict '{'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}}'
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions'
DEBUG: Set input with path './engine/atomic_structure/atomic_positions' and node dict '{'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}}'
DEBUG: Add argument to 'ATOMIC_FORCES'
DEBUG: Argument's conversion function: <function get_neb_atomic_forces_card at 0x7f2e8c744cf8>
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.456670009000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-4.56670009, 0.0, 0.0]
DEBUG: Add input for node 'atom' with dict '{'atom': {'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}}'
DEBUG: Convert attribute 'index' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/index' not in converter!
DEBUG: Convert attribute 'name' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/name' not in converter!
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Element's path './engine/atomic_structure/atomic_positions/atom/_text' not in converter!
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Add input for node 'atom' with dict '{'atom': {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}}'
DEBUG: Convert attribute 'index' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/index' not in converter!
DEBUG: Convert attribute 'name' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/name' not in converter!
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Element's path './engine/atomic_structure/atomic_positions/atom/_text' not in converter!
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.1557766760000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [1.55776676, 0.0, 0.0]
DEBUG: Add input for node 'atom' with dict '{'atom': {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}}'
DEBUG: Convert attribute 'index' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/index' not in converter!
DEBUG: Convert attribute 'name' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/name' not in converter!
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Element's path './engine/atomic_structure/atomic_positions/atom/_text' not in converter!
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Add input for node 'cell' with dict '{'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}}'
DEBUG: Convert element './input/engine/atomic_structure/cell'
DEBUG: Element's path './engine/atomic_structure/cell' not in converter!
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Add input for node 'a1' with dict '{'a1': [12.0, 0.0, 0.0]}'
DEBUG: Convert element './input/engine/atomic_structure/cell/a1'
DEBUG: Element's path './engine/atomic_structure/cell/a1' not in converter!
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Add input for node 'a2' with dict '{'a2': [0.0, 12.0, 0.0]}'
DEBUG: Convert element './input/engine/atomic_structure/cell/a2'
DEBUG: Element's path './engine/atomic_structure/cell/a2' not in converter!
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Add input for node 'a3' with dict '{'a3': [0.0, 0.0, 12.0]}'
DEBUG: Convert element './input/engine/atomic_structure/cell/a3'
DEBUG: Element's path './engine/atomic_structure/cell/a3' not in converter!
DEBUG: Decode node 'atomic_structure' with path './input/engine/atomic_structure'
DEBUG: Decode attributes of element 'atomic_structure': [('alat', '1.200000000000000E+001'), ('nat', '3')]
DEBUG: Map attribute 'alat' to type 'double'
DEBUG: Map attribute 'nat' to type 'positiveInteger'
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.155776676000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-1.55776676, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.4566700090000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [4.56670009, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Decode '' to type 'neb:atomic_structureType'
DEBUG: Add input for node 'atomic_structure' with dict '{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}}'
DEBUG: Convert attribute 'alat' of element './input/engine/atomic_structure'
DEBUG: Attribute's path './engine/atomic_structure/alat' not in converter!
DEBUG: Convert attribute 'nat' of element './input/engine/atomic_structure'
DEBUG: Set input with path './engine/atomic_structure/nat' and node dict '{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}}'
DEBUG: Add argument to 'SYSTEM[nat]'
DEBUG: Argument's conversion function: <function neb_set_system_nat at 0x7f2e8c74f410>
DEBUG: Convert element './input/engine/atomic_structure'
DEBUG: Set input with path './engine/atomic_structure/_text' and node dict '{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}}'
DEBUG: Add argument to 'ATOMIC_POSITIONS'
DEBUG: Argument's conversion function: <function get_neb_images_positions_card at 0x7f2e8c744c08>
DEBUG: Add argument to 'CELL_PARAMETERS'
DEBUG: Argument's conversion function: <function get_neb_cell_parameters_card at 0x7f2e8c744c80>
DEBUG: Decode node 'atomic_positions' with path './input/engine/atomic_structure/atomic_positions'
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.155776676000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-1.55776676, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.4566700090000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [4.56670009, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:atomic_positionsType'
DEBUG: Add input for node 'atomic_positions' with dict '{'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}}'
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions'
DEBUG: Set input with path './engine/atomic_structure/atomic_positions' and node dict '{'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}}'
DEBUG: Add argument to 'ATOMIC_FORCES'
DEBUG: Argument's conversion function: <function get_neb_atomic_forces_card at 0x7f2e8c744cf8>
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '1'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '-0.155776676000000000E+01 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [-1.55776676, 0.0, 0.0]
DEBUG: Add input for node 'atom' with dict '{'atom': {'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}}'
DEBUG: Convert attribute 'index' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/index' not in converter!
DEBUG: Convert attribute 'name' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/name' not in converter!
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Element's path './engine/atomic_structure/atomic_positions/atom/_text' not in converter!
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '2'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.0000000000000000000E+00 0.000000000000000E+00 0.0000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Add input for node 'atom' with dict '{'atom': {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}}'
DEBUG: Convert attribute 'index' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/index' not in converter!
DEBUG: Convert attribute 'name' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/name' not in converter!
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Element's path './engine/atomic_structure/atomic_positions/atom/_text' not in converter!
DEBUG: Decode node 'atom' with path './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Decode attributes of element 'atom': [('index', '3'), ('name', 'H')]
DEBUG: Map attribute 'index' to type 'positiveInteger'
DEBUG: Map attribute 'name' to type 'string'
DEBUG: Decode '0.4566700090000000000E+01 0.000000000000000E+00 0.00000000000000E+00' to type 'neb:atomType'
DEBUG: Text decoded to: [4.56670009, 0.0, 0.0]
DEBUG: Add input for node 'atom' with dict '{'atom': {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}}'
DEBUG: Convert attribute 'index' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/index' not in converter!
DEBUG: Convert attribute 'name' of element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Attribute's path './engine/atomic_structure/atomic_positions/atom/name' not in converter!
DEBUG: Convert element './input/engine/atomic_structure/atomic_positions/atom'
DEBUG: Element's path './engine/atomic_structure/atomic_positions/atom/_text' not in converter!
DEBUG: Decode node 'cell' with path './input/engine/atomic_structure/cell'
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Decode '' to type 'neb:cellType'
DEBUG: Add input for node 'cell' with dict '{'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}}'
DEBUG: Convert element './input/engine/atomic_structure/cell'
DEBUG: Element's path './engine/atomic_structure/cell' not in converter!
DEBUG: Decode node 'a1' with path './input/engine/atomic_structure/cell/a1'
DEBUG: Decode '0.12000000000000000E+02 0.000000000000000000E+00 0.0000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [12.0, 0.0, 0.0]
DEBUG: Add input for node 'a1' with dict '{'a1': [12.0, 0.0, 0.0]}'
DEBUG: Convert element './input/engine/atomic_structure/cell/a1'
DEBUG: Element's path './engine/atomic_structure/cell/a1' not in converter!
DEBUG: Decode node 'a2' with path './input/engine/atomic_structure/cell/a2'
DEBUG: Decode '0.0000000000000E+00 0.12000000000000000E+02 0.000000000000000000E+00' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 12.0, 0.0]
DEBUG: Add input for node 'a2' with dict '{'a2': [0.0, 12.0, 0.0]}'
DEBUG: Convert element './input/engine/atomic_structure/cell/a2'
DEBUG: Element's path './engine/atomic_structure/cell/a2' not in converter!
DEBUG: Decode node 'a3' with path './input/engine/atomic_structure/cell/a3'
DEBUG: Decode '0.0000000000000E+00 0.0000000000000E+00 0.12000000000000000E+02' to type 'neb:d3vectorType'
DEBUG: Text decoded to: [0.0, 0.0, 12.0]
DEBUG: Add input for node 'a3' with dict '{'a3': [0.0, 0.0, 12.0]}'
DEBUG: Convert element './input/engine/atomic_structure/cell/a3'
DEBUG: Element's path './engine/atomic_structure/cell/a3' not in converter!
DEBUG: Decode node 'dft' with path './input/engine/dft'
DEBUG: Decode node 'functional' with path './input/engine/dft/functional'
DEBUG: Decode 'PBE' to type 'neb:functionalType'
DEBUG: Text decoded to: PBE
DEBUG: Decode '' to type 'neb:dftType'
DEBUG: Add input for node 'dft' with dict '{'dft': {'functional': 'PBE'}}'
DEBUG: Convert element './input/engine/dft'
DEBUG: Element's path './engine/dft' not in converter!
DEBUG: Decode node 'functional' with path './input/engine/dft/functional'
DEBUG: Decode 'PBE' to type 'neb:functionalType'
DEBUG: Text decoded to: PBE
DEBUG: Add input for node 'functional' with dict '{'functional': 'PBE'}'
DEBUG: Convert element './input/engine/dft/functional'
DEBUG: Set input with path './engine/dft/functional' and node dict '{'functional': 'PBE'}'
DEBUG: Set SYSTEM[input_dft]='PBE'
DEBUG: Decode node 'spin' with path './input/engine/spin'
DEBUG: Decode node 'lsda' with path './input/engine/spin/lsda'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Decode node 'noncolin' with path './input/engine/spin/noncolin'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'spinorbit' with path './input/engine/spin/spinorbit'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:spinType'
DEBUG: Add input for node 'spin' with dict '{'spin': {'noncolin': False, 'spinorbit': False, 'lsda': True}}'
DEBUG: Convert element './input/engine/spin'
DEBUG: Element's path './engine/spin' not in converter!
DEBUG: Decode node 'lsda' with path './input/engine/spin/lsda'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Add input for node 'lsda' with dict '{'lsda': True}'
DEBUG: Convert element './input/engine/spin/lsda'
DEBUG: Set input with path './engine/spin/lsda' and node dict '{'lsda': True}'
DEBUG: Add argument to 'SYSTEM[nspin]'
DEBUG: Argument's conversion function: <function get_system_nspin at 0x7f2e8c74f0c8>
DEBUG: Decode node 'noncolin' with path './input/engine/spin/noncolin'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'noncolin' with dict '{'noncolin': False}'
DEBUG: Convert element './input/engine/spin/noncolin'
DEBUG: Set input with path './engine/spin/noncolin' and node dict '{'noncolin': False}'
DEBUG: Set SYSTEM[noncolin]=.false.
DEBUG: Add argument to 'SYSTEM[nspin]'
DEBUG: Argument's conversion function: <function get_system_nspin at 0x7f2e8c74f0c8>
DEBUG: Decode node 'spinorbit' with path './input/engine/spin/spinorbit'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'spinorbit' with dict '{'spinorbit': False}'
DEBUG: Convert element './input/engine/spin/spinorbit'
DEBUG: Set input with path './engine/spin/spinorbit' and node dict '{'spinorbit': False}'
DEBUG: Set SYSTEM[lspinorb]=.false.
DEBUG: Decode node 'bands' with path './input/engine/bands'
DEBUG: Decode node 'smearing' with path './input/engine/bands/smearing'
DEBUG: Decode attributes of element 'smearing': [('degauss', '3.0000000000E-002')]
DEBUG: Map attribute 'degauss' to type 'double'
DEBUG: Decode 'gaussian' to type 'neb:smearingType'
DEBUG: Text decoded to: gaussian
DEBUG: Decode node 'tot_charge' with path './input/engine/bands/tot_charge'
DEBUG: Decode '0.000000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Decode node 'occupations' with path './input/engine/bands/occupations'
DEBUG: Decode 'smearing' to type 'neb:occupationsType'
DEBUG: Text decoded to: smearing
DEBUG: Decode '' to type 'neb:bandsType'
DEBUG: Add input for node 'bands' with dict '{'bands': {'smearing': {'degauss': 0.03, '_text': 'gaussian'}, 'tot_charge': 0.0, 'occupations': 'smearing'}}'
DEBUG: Convert element './input/engine/bands'
DEBUG: Element's path './engine/bands' not in converter!
DEBUG: Decode node 'smearing' with path './input/engine/bands/smearing'
DEBUG: Decode attributes of element 'smearing': [('degauss', '3.0000000000E-002')]
DEBUG: Map attribute 'degauss' to type 'double'
DEBUG: Decode 'gaussian' to type 'neb:smearingType'
DEBUG: Text decoded to: gaussian
DEBUG: Add input for node 'smearing' with dict '{'smearing': {'degauss': 0.03, '_text': 'gaussian'}}'
DEBUG: Convert attribute 'degauss' of element './input/engine/bands/smearing'
DEBUG: Set input with path './engine/bands/smearing/degauss' and node dict '{'smearing': {'degauss': 0.03, '_text': 'gaussian'}}'
DEBUG: Set SYSTEM[degauss]=0.03
DEBUG: Convert element './input/engine/bands/smearing'
DEBUG: Set input with path './engine/bands/smearing/_text' and node dict '{'smearing': {'degauss': 0.03, '_text': 'gaussian'}}'
DEBUG: Set SYSTEM[smearing]='gaussian'
DEBUG: Decode node 'tot_charge' with path './input/engine/bands/tot_charge'
DEBUG: Decode '0.000000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Add input for node 'tot_charge' with dict '{'tot_charge': 0.0}'
DEBUG: Convert element './input/engine/bands/tot_charge'
DEBUG: Set input with path './engine/bands/tot_charge' and node dict '{'tot_charge': 0.0}'
DEBUG: Set SYSTEM[tot_charge]=0.0
DEBUG: Decode node 'occupations' with path './input/engine/bands/occupations'
DEBUG: Decode 'smearing' to type 'neb:occupationsType'
DEBUG: Text decoded to: smearing
DEBUG: Add input for node 'occupations' with dict '{'occupations': 'smearing'}'
DEBUG: Convert element './input/engine/bands/occupations'
DEBUG: Set input with path './engine/bands/occupations/_text' and node dict '{'occupations': 'smearing'}'
DEBUG: Set SYSTEM[occupations]='smearing'
DEBUG: Decode node 'basis' with path './input/engine/basis'
DEBUG: Decode node 'gamma_only' with path './input/engine/basis/gamma_only'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Decode node 'ecutwfc' with path './input/engine/basis/ecutwfc'
DEBUG: Decode '0.10000000000000E+02' to type 'double'
DEBUG: Text decoded to: 10.0
DEBUG: Decode node 'ecutrho' with path './input/engine/basis/ecutrho'
DEBUG: Decode '0.50000000000000E+02' to type 'double'
DEBUG: Text decoded to: 50.0
DEBUG: Decode '' to type 'neb:basisType'
DEBUG: Add input for node 'basis' with dict '{'basis': {'ecutwfc': 10.0, 'gamma_only': True, 'ecutrho': 50.0}}'
DEBUG: Convert element './input/engine/basis'
DEBUG: Element's path './engine/basis' not in converter!
DEBUG: Decode node 'gamma_only' with path './input/engine/basis/gamma_only'
DEBUG: Decode 'true' to type 'boolean'
DEBUG: Text decoded to: True
DEBUG: Add input for node 'gamma_only' with dict '{'gamma_only': True}'
DEBUG: Convert element './input/engine/basis/gamma_only'
DEBUG: Set input with path './engine/basis/gamma_only' and node dict '{'gamma_only': True}'
DEBUG: Add argument to 'K_POINTS'
DEBUG: Argument's conversion function: <function get_k_points_card at 0x7f2e8c7449b0>
DEBUG: Decode node 'ecutwfc' with path './input/engine/basis/ecutwfc'
DEBUG: Decode '0.10000000000000E+02' to type 'double'
DEBUG: Text decoded to: 10.0
DEBUG: Add input for node 'ecutwfc' with dict '{'ecutwfc': 10.0}'
DEBUG: Convert element './input/engine/basis/ecutwfc'
DEBUG: Set input with path './engine/basis/ecutwfc' and node dict '{'ecutwfc': 10.0}'
DEBUG: Set SYSTEM[ecutwfc]=10.0
DEBUG: Decode node 'ecutrho' with path './input/engine/basis/ecutrho'
DEBUG: Decode '0.50000000000000E+02' to type 'double'
DEBUG: Text decoded to: 50.0
DEBUG: Add input for node 'ecutrho' with dict '{'ecutrho': 50.0}'
DEBUG: Convert element './input/engine/basis/ecutrho'
DEBUG: Set input with path './engine/basis/ecutrho' and node dict '{'ecutrho': 50.0}'
DEBUG: Set SYSTEM[ecutrho]=50.0
DEBUG: Decode node 'electron_control' with path './input/engine/electron_control'
DEBUG: Decode node 'diagonalization' with path './input/engine/electron_control/diagonalization'
DEBUG: Decode 'davidson' to type 'neb:diagoType'
DEBUG: Text decoded to: davidson
DEBUG: Decode node 'mixing_mode' with path './input/engine/electron_control/mixing_mode'
DEBUG: Decode 'plain' to type 'neb:mixingModeType'
DEBUG: Text decoded to: plain
DEBUG: Decode node 'mixing_beta' with path './input/engine/electron_control/mixing_beta'
DEBUG: Decode '0.300000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Decode node 'conv_thr' with path './input/engine/electron_control/conv_thr'
DEBUG: Decode '0.10000000000000E-07' to type 'double'
DEBUG: Text decoded to: 1e-08
DEBUG: Decode node 'mixing_ndim' with path './input/engine/electron_control/mixing_ndim'
DEBUG: Decode '8' to type 'positiveInteger'
DEBUG: Text decoded to: 8
DEBUG: Decode node 'max_nstep' with path './input/engine/electron_control/max_nstep'
DEBUG: Decode '100' to type 'positiveInteger'
DEBUG: Text decoded to: 100
DEBUG: Decode node 'real_space_q' with path './input/engine/electron_control/real_space_q'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'tq_smoothing' with path './input/engine/electron_control/tq_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'tbeta_smoothing' with path './input/engine/electron_control/tbeta_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'diago_thr_init' with path './input/engine/electron_control/diago_thr_init'
DEBUG: Decode '0.0000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Decode node 'diago_full_acc' with path './input/engine/electron_control/diago_full_acc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'diago_cg_maxiter' with path './input/engine/electron_control/diago_cg_maxiter'
DEBUG: Decode '100' to type 'nonNegativeInteger'
DEBUG: Text decoded to: 100
DEBUG: Decode '' to type 'neb:electron_controlType'
DEBUG: Add input for node 'electron_control' with dict '{'electron_control': {'tq_smoothing': False, 'conv_thr': 1e-08, 'diago_thr_init': 0.0, 'diago_full_acc': False, 'max_nstep': 100, 'diago_cg_maxiter': 100, 'mixing_ndim': 8, 'mixing_mode': 'plain', 'diagonalization': 'davidson', 'tbeta_smoothing': False, 'mixing_beta': 0.3, 'real_space_q': False}}'
DEBUG: Convert element './input/engine/electron_control'
DEBUG: Element's path './engine/electron_control' not in converter!
DEBUG: Decode node 'diagonalization' with path './input/engine/electron_control/diagonalization'
DEBUG: Decode 'davidson' to type 'neb:diagoType'
DEBUG: Text decoded to: davidson
DEBUG: Add input for node 'diagonalization' with dict '{'diagonalization': 'davidson'}'
DEBUG: Convert element './input/engine/electron_control/diagonalization'
DEBUG: Set input with path './engine/electron_control/diagonalization' and node dict '{'diagonalization': 'davidson'}'
DEBUG: Set ELECTRONS[diagonalization]='davidson'
DEBUG: Decode node 'mixing_mode' with path './input/engine/electron_control/mixing_mode'
DEBUG: Decode 'plain' to type 'neb:mixingModeType'
DEBUG: Text decoded to: plain
DEBUG: Add input for node 'mixing_mode' with dict '{'mixing_mode': 'plain'}'
DEBUG: Convert element './input/engine/electron_control/mixing_mode'
DEBUG: Set input with path './engine/electron_control/mixing_mode' and node dict '{'mixing_mode': 'plain'}'
DEBUG: Set ELECTRONS[mixing_mode]='plain'
DEBUG: Decode node 'mixing_beta' with path './input/engine/electron_control/mixing_beta'
DEBUG: Decode '0.300000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.3
DEBUG: Add input for node 'mixing_beta' with dict '{'mixing_beta': 0.3}'
DEBUG: Convert element './input/engine/electron_control/mixing_beta'
DEBUG: Set input with path './engine/electron_control/mixing_beta' and node dict '{'mixing_beta': 0.3}'
DEBUG: Set ELECTRONS[mixing_beta]=0.3
DEBUG: Decode node 'conv_thr' with path './input/engine/electron_control/conv_thr'
DEBUG: Decode '0.10000000000000E-07' to type 'double'
DEBUG: Text decoded to: 1e-08
DEBUG: Add input for node 'conv_thr' with dict '{'conv_thr': 1e-08}'
DEBUG: Convert element './input/engine/electron_control/conv_thr'
DEBUG: Set input with path './engine/electron_control/conv_thr' and node dict '{'conv_thr': 1e-08}'
DEBUG: Set ELECTRONS[conv_thr]=1e-08
DEBUG: Decode node 'mixing_ndim' with path './input/engine/electron_control/mixing_ndim'
DEBUG: Decode '8' to type 'positiveInteger'
DEBUG: Text decoded to: 8
DEBUG: Add input for node 'mixing_ndim' with dict '{'mixing_ndim': 8}'
DEBUG: Convert element './input/engine/electron_control/mixing_ndim'
DEBUG: Set input with path './engine/electron_control/mixing_ndim' and node dict '{'mixing_ndim': 8}'
DEBUG: Set ELECTRONS[mixing_ndim]=8
DEBUG: Decode node 'max_nstep' with path './input/engine/electron_control/max_nstep'
DEBUG: Decode '100' to type 'positiveInteger'
DEBUG: Text decoded to: 100
DEBUG: Add input for node 'max_nstep' with dict '{'max_nstep': 100}'
DEBUG: Convert element './input/engine/electron_control/max_nstep'
DEBUG: Set input with path './engine/electron_control/max_nstep' and node dict '{'max_nstep': 100}'
DEBUG: Set ELECTRONS[electron_maxstep]=100
DEBUG: Decode node 'real_space_q' with path './input/engine/electron_control/real_space_q'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'real_space_q' with dict '{'real_space_q': False}'
DEBUG: Convert element './input/engine/electron_control/real_space_q'
DEBUG: Set input with path './engine/electron_control/real_space_q' and node dict '{'real_space_q': False}'
DEBUG: Set ELECTRONS[tqr]=.false.
DEBUG: Decode node 'tq_smoothing' with path './input/engine/electron_control/tq_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'tq_smoothing' with dict '{'tq_smoothing': False}'
DEBUG: Convert element './input/engine/electron_control/tq_smoothing'
DEBUG: Set input with path './engine/electron_control/tq_smoothing' and node dict '{'tq_smoothing': False}'
DEBUG: Set ELECTRONS[tq_smoothing]=.false.
DEBUG: Decode node 'tbeta_smoothing' with path './input/engine/electron_control/tbeta_smoothing'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'tbeta_smoothing' with dict '{'tbeta_smoothing': False}'
DEBUG: Convert element './input/engine/electron_control/tbeta_smoothing'
DEBUG: Set input with path './engine/electron_control/tbeta_smoothing' and node dict '{'tbeta_smoothing': False}'
DEBUG: Set ELECTRONS[tbeta_smoothing]=.false.
DEBUG: Decode node 'diago_thr_init' with path './input/engine/electron_control/diago_thr_init'
DEBUG: Decode '0.0000000000000E+00' to type 'double'
DEBUG: Text decoded to: 0.0
DEBUG: Add input for node 'diago_thr_init' with dict '{'diago_thr_init': 0.0}'
DEBUG: Convert element './input/engine/electron_control/diago_thr_init'
DEBUG: Set input with path './engine/electron_control/diago_thr_init' and node dict '{'diago_thr_init': 0.0}'
DEBUG: Set ELECTRONS[diago_thr_init]=0.0
DEBUG: Decode node 'diago_full_acc' with path './input/engine/electron_control/diago_full_acc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'diago_full_acc' with dict '{'diago_full_acc': False}'
DEBUG: Convert element './input/engine/electron_control/diago_full_acc'
DEBUG: Set input with path './engine/electron_control/diago_full_acc' and node dict '{'diago_full_acc': False}'
DEBUG: Set ELECTRONS[diago_full_acc]=.false.
DEBUG: Decode node 'diago_cg_maxiter' with path './input/engine/electron_control/diago_cg_maxiter'
DEBUG: Decode '100' to type 'nonNegativeInteger'
DEBUG: Text decoded to: 100
DEBUG: Add input for node 'diago_cg_maxiter' with dict '{'diago_cg_maxiter': 100}'
DEBUG: Convert element './input/engine/electron_control/diago_cg_maxiter'
DEBUG: Set input with path './engine/electron_control/diago_cg_maxiter' and node dict '{'diago_cg_maxiter': 100}'
DEBUG: Set ELECTRONS[diago_cg_maxiter]=100
DEBUG: Decode node 'k_points_IBZ' with path './input/engine/k_points_IBZ'
DEBUG: Decode node 'nk' with path './input/engine/k_points_IBZ/nk'
DEBUG: Decode '1' to type 'positiveInteger'
DEBUG: Text decoded to: 1
DEBUG: Decode node 'k_point' with path './input/engine/k_points_IBZ/k_point'
DEBUG: Decode attributes of element 'k_point': [('weight', '1.0000000000000000000E+00')]
DEBUG: Map attribute 'weight' to type 'double'
DEBUG: Decode '0.000000000000000E+00 0.00000000000000E+00 0.0000000000000E+00' to type 'neb:k_pointType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Decode '' to type 'neb:k_points_IBZType'
DEBUG: Add input for node 'k_points_IBZ' with dict '{'k_points_IBZ': {'k_point': {'weight': 1.0, '_text': [0.0, 0.0, 0.0]}, 'nk': 1}}'
DEBUG: Convert element './input/engine/k_points_IBZ'
DEBUG: Set input with path './engine/k_points_IBZ' and node dict '{'k_points_IBZ': {'k_point': {'weight': 1.0, '_text': [0.0, 0.0, 0.0]}, 'nk': 1}}'
DEBUG: Add argument to 'K_POINTS'
DEBUG: Argument's conversion function: <function get_k_points_card at 0x7f2e8c7449b0>
DEBUG: Decode node 'nk' with path './input/engine/k_points_IBZ/nk'
DEBUG: Decode '1' to type 'positiveInteger'
DEBUG: Text decoded to: 1
DEBUG: Add input for node 'nk' with dict '{'nk': 1}'
DEBUG: Convert element './input/engine/k_points_IBZ/nk'
DEBUG: Element's path './engine/k_points_IBZ/nk' not in converter!
DEBUG: Decode node 'k_point' with path './input/engine/k_points_IBZ/k_point'
DEBUG: Decode attributes of element 'k_point': [('weight', '1.0000000000000000000E+00')]
DEBUG: Map attribute 'weight' to type 'double'
DEBUG: Decode '0.000000000000000E+00 0.00000000000000E+00 0.0000000000000E+00' to type 'neb:k_pointType'
DEBUG: Text decoded to: [0.0, 0.0, 0.0]
DEBUG: Add input for node 'k_point' with dict '{'k_point': {'weight': 1.0, '_text': [0.0, 0.0, 0.0]}}'
DEBUG: Convert attribute 'weight' of element './input/engine/k_points_IBZ/k_point'
DEBUG: Attribute's path './engine/k_points_IBZ/k_point/weight' not in converter!
DEBUG: Convert element './input/engine/k_points_IBZ/k_point'
DEBUG: Element's path './engine/k_points_IBZ/k_point/_text' not in converter!
DEBUG: Decode node 'ion_control' with path './input/engine/ion_control'
DEBUG: Decode '' to type 'neb:ion_controlType'
DEBUG: Text decoded to: 
DEBUG: Add input for node 'ion_control' with dict '{'ion_control': ''}'
DEBUG: Convert element './input/engine/ion_control'
DEBUG: Element's path './engine/ion_control' not in converter!
DEBUG: Decode node 'cell_control' with path './input/engine/cell_control'
DEBUG: Decode '' to type 'neb:cell_controlType'
DEBUG: Text decoded to: 
DEBUG: Add input for node 'cell_control' with dict '{'cell_control': ''}'
DEBUG: Convert element './input/engine/cell_control'
DEBUG: Element's path './engine/cell_control' not in converter!
DEBUG: Decode node 'symmetry_flags' with path './input/engine/symmetry_flags'
DEBUG: Decode node 'nosym' with path './input/engine/symmetry_flags/nosym'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'nosym_evc' with path './input/engine/symmetry_flags/nosym_evc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'noinv' with path './input/engine/symmetry_flags/noinv'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'no_t_rev' with path './input/engine/symmetry_flags/no_t_rev'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'force_symmorphic' with path './input/engine/symmetry_flags/force_symmorphic'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode node 'use_all_frac' with path './input/engine/symmetry_flags/use_all_frac'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Decode '' to type 'neb:symmetry_flagsType'
DEBUG: Add input for node 'symmetry_flags' with dict '{'symmetry_flags': {'force_symmorphic': False, 'nosym_evc': False, 'noinv': False, 'use_all_frac': False, 'nosym': False, 'no_t_rev': False}}'
DEBUG: Convert element './input/engine/symmetry_flags'
DEBUG: Element's path './engine/symmetry_flags' not in converter!
DEBUG: Decode node 'nosym' with path './input/engine/symmetry_flags/nosym'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'nosym' with dict '{'nosym': False}'
DEBUG: Convert element './input/engine/symmetry_flags/nosym'
DEBUG: Set input with path './engine/symmetry_flags/nosym' and node dict '{'nosym': False}'
DEBUG: Set SYSTEM[nosym]=.false.
DEBUG: Decode node 'nosym_evc' with path './input/engine/symmetry_flags/nosym_evc'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'nosym_evc' with dict '{'nosym_evc': False}'
DEBUG: Convert element './input/engine/symmetry_flags/nosym_evc'
DEBUG: Set input with path './engine/symmetry_flags/nosym_evc' and node dict '{'nosym_evc': False}'
DEBUG: Set SYSTEM[nosym_evc]=.false.
DEBUG: Decode node 'noinv' with path './input/engine/symmetry_flags/noinv'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'noinv' with dict '{'noinv': False}'
DEBUG: Convert element './input/engine/symmetry_flags/noinv'
DEBUG: Set input with path './engine/symmetry_flags/noinv' and node dict '{'noinv': False}'
DEBUG: Set SYSTEM[noinv]=.false.
DEBUG: Decode node 'no_t_rev' with path './input/engine/symmetry_flags/no_t_rev'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'no_t_rev' with dict '{'no_t_rev': False}'
DEBUG: Convert element './input/engine/symmetry_flags/no_t_rev'
DEBUG: Set input with path './engine/symmetry_flags/no_t_rev' and node dict '{'no_t_rev': False}'
DEBUG: Set SYSTEM[no_t_rev]=.false.
DEBUG: Decode node 'force_symmorphic' with path './input/engine/symmetry_flags/force_symmorphic'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'force_symmorphic' with dict '{'force_symmorphic': False}'
DEBUG: Convert element './input/engine/symmetry_flags/force_symmorphic'
DEBUG: Set input with path './engine/symmetry_flags/force_symmorphic' and node dict '{'force_symmorphic': False}'
DEBUG: Set SYSTEM[force_symmorphic]=.false.
DEBUG: Decode node 'use_all_frac' with path './input/engine/symmetry_flags/use_all_frac'
DEBUG: Decode 'false' to type 'boolean'
DEBUG: Text decoded to: False
DEBUG: Add input for node 'use_all_frac' with dict '{'use_all_frac': False}'
DEBUG: Convert element './input/engine/symmetry_flags/use_all_frac'
DEBUG: Set input with path './engine/symmetry_flags/use_all_frac' and node dict '{'use_all_frac': False}'
DEBUG: Set SYSTEM[use_all_frac]=.false.
DEBUG: Set input with path './path/constantBiasFlag' and node dict '{'constantBiasFlag': False}'
DEBUG: Set PATH[lfcpopt]=.false.
DEBUG: Set input with path './engine/cell_control/pressure' and node dict '{'pressure': 0.0}'
DEBUG: Set CELL[press]=0.0
DEBUG: Set input with path './engine/electric_field/dipole_correction' and node dict '{'dipole_correction': False}'
DEBUG: Set CONTROL[dipfield]=.false.
DEBUG: Set input with path './engine/ion_control/md/timestep' and node dict '{'timestep': 20.0}'
DEBUG: Set CONTROL[dt]=20.0
DEBUG: Set input with path './engine/atomic_species/species/starting_magnetization' and node dict '{'starting_magnetization': 0.0}'
DEBUG: Add input for parameter PATH[CI_scheme] with value 'auto'
DEBUG: Add input for parameter PATH[lfcpopt] with value .false.
DEBUG: Add input for parameter PATH[nstep_path] with value 20
DEBUG: Add input for parameter PATH[num_of_images] with value 7
DEBUG: Add input for parameter PATH[opt_scheme] with value 'broyden'
DEBUG: Add input for parameter PATH[string_method] with value 'neb'
DEBUG: Add input for parameter PATH[use_freezing] with value .false.
DEBUG: Add input for parameter PATH[use_masses] with value .false.
DEBUG: Add input for parameter CONTROL[calculation] with value 'scf'
DEBUG: Add input for parameter CONTROL[dipfield] with value .false.
DEBUG: Add input for parameter CONTROL[disk_io] with value 'low'
DEBUG: Add input for parameter CONTROL[dt] with value 20.0
DEBUG: Add input for parameter CONTROL[etot_conv_thr] with value 0.0001
DEBUG: Add input for parameter CONTROL[forc_conv_thr] with value 0.001
DEBUG: Add input for parameter CONTROL[iprint] with value 100000
DEBUG: Add input for parameter CONTROL[max_seconds] with value 10000000
DEBUG: Add input for parameter CONTROL[outdir] with value '/scratch/pdelugas/espresso/tempdir'
DEBUG: Add input for parameter CONTROL[prefix] with value 'H2+H'
DEBUG: Add input for parameter CONTROL[pseudo_dir] with value '/scratch/pdelugas/espresso/pseudo'
DEBUG: Add input for parameter CONTROL[restart_mode] with value 'from_scratch'
DEBUG: Add input for parameter CONTROL[title] with value ''
DEBUG: Add input for parameter CONTROL[tprnfor] with value .false.
DEBUG: Add input for parameter CONTROL[tstress] with value .false.
DEBUG: Add input for parameter CONTROL[verbosity] with value 'low'
DEBUG: Add input for parameter CONTROL[wf_collect] with value .false.
DEBUG: Add input for parameter SYSTEM[degauss] with value 0.03
DEBUG: Add input for parameter SYSTEM[ecutrho] with value 50.0
DEBUG: Add input for parameter SYSTEM[ecutwfc] with value 10.0
DEBUG: Add input for parameter SYSTEM[force_symmorphic] with value .false.
DEBUG: Add input for parameter SYSTEM[Hubbard_alpha] with value {'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: No conversion function for parameter SYSTEM[Hubbard_alpha], skip ... 
DEBUG: Add input for parameter SYSTEM[Hubbard_beta] with value {'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: No conversion function for parameter SYSTEM[Hubbard_beta], skip ... 
DEBUG: Add input for parameter SYSTEM[Hubbard_J] with value {'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: No conversion function for parameter SYSTEM[Hubbard_J], skip ... 
DEBUG: Add input for parameter SYSTEM[Hubbard_J0] with value {'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: No conversion function for parameter SYSTEM[Hubbard_J0], skip ... 
DEBUG: Add input for parameter SYSTEM[Hubbard_U] with value {'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: No conversion function for parameter SYSTEM[Hubbard_U], skip ... 
DEBUG: Add input for parameter SYSTEM[input_dft] with value 'PBE'
DEBUG: Add input for parameter SYSTEM[lspinorb] with value .false.
DEBUG: Add input for parameter SYSTEM[nat] with value {'atomic_structure': [{'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-4.56670009, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [1.55776676, 0.0, 0.0]}]}, 'nat': 3}, {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}], '_get_qe_input': <function neb_set_system_nat at 0x7f2e8c74f410>, '_related_tag': 'atomic_structure'}
DEBUG: Add input for parameter SYSTEM[no_t_rev] with value .false.
DEBUG: Add input for parameter SYSTEM[noinv] with value .false.
DEBUG: Add input for parameter SYSTEM[noncolin] with value .false.
DEBUG: Add input for parameter SYSTEM[nosym] with value .false.
DEBUG: Add input for parameter SYSTEM[nosym_evc] with value .false.
DEBUG: Add input for parameter SYSTEM[nspin] with value {'_related_tag': 'noncolin', 'lsda': True, 'noncolin': False, '_get_qe_input': <function get_system_nspin at 0x7f2e8c74f0c8>}
DEBUG: Add input for parameter SYSTEM[ntyp] with value 1
DEBUG: Add input for parameter SYSTEM[occupations] with value 'smearing'
DEBUG: Add input for parameter SYSTEM[smearing] with value 'gaussian'
DEBUG: Add input for parameter SYSTEM[starting_magnetization] with value {'_get_qe_input': <function get_starting_magnetization at 0x7f2e8c744f50>, '_related_tag': 'atomic_species', 'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: Add input for parameter SYSTEM[starting_ns_eigenvalue] with value {'atomic_species': {'ntyp': 1, 'species': {'pseudo_file': 'HUSPBE.RRKJ3', 'mass': 1.00794, 'name': 'H'}}}
DEBUG: No conversion function for parameter SYSTEM[starting_ns_eigenvalue], skip ... 
DEBUG: Add input for parameter SYSTEM[tot_charge] with value 0.0
DEBUG: Add input for parameter SYSTEM[use_all_frac] with value .false.
DEBUG: Add input for parameter ELECTRONS[conv_thr] with value 1e-08
DEBUG: Add input for parameter ELECTRONS[diago_cg_maxiter] with value 100
DEBUG: Add input for parameter ELECTRONS[diago_full_acc] with value .false.
DEBUG: Add input for parameter ELECTRONS[diago_thr_init] with value 0.0
DEBUG: Add input for parameter ELECTRONS[diagonalization] with value 'davidson'
DEBUG: Add input for parameter ELECTRONS[electron_maxstep] with value 100
DEBUG: Add input for parameter ELECTRONS[mixing_beta] with value 0.3
DEBUG: Add input for parameter ELECTRONS[mixing_mode] with value 'plain'
DEBUG: Add input for parameter ELECTRONS[mixing_ndim] with value 8
DEBUG: Add input for parameter ELECTRONS[tbeta_smoothing] with value .false.
DEBUG: Add input for parameter ELECTRONS[tq_smoothing] with value .false.
DEBUG: Add input for parameter ELECTRONS[tqr] with value .false.
DEBUG: Add input for parameter CELL[press] with value 0.0
DEBUG: Add input for parameter CELL[press_conv_thr] with value 0.5
DEBUG: Add card: CLIMBING_IMAGES
DEBUG: Card arguments: {'_get_qe_input': <function get_climbing_images at 0x7f2e8c744b90>, 'climbingImage': 'auto'}
DEBUG: Add card: ATOMIC_POSITIONS
DEBUG: Card arguments: {'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}, '_get_qe_input': <function get_neb_images_positions_card at 0x7f2e8c744c08>}
Namespace(in='H2+H.xml', verbosity=4)
{'atomic_structure': {'cell': {'a1': [12.0, 0.0, 0.0], 'a3': [0.0, 0.0, 12.0], 'a2': [0.0, 12.0, 0.0]}, 'alat': 12.0, 'atomic_positions': {'atom': [{'index': 1, 'name': 'H', '_text': [-1.55776676, 0.0, 0.0]}, {'index': 2, 'name': 'H', '_text': [0.0, 0.0, 0.0]}, {'index': 3, 'name': 'H', '_text': [4.56670009, 0.0, 0.0]}]}, 'nat': 3}, '_get_qe_input': <function get_neb_images_positions_card at 0x7f2e8c744c08>}
Traceback (most recent call last):
  File "../qespresso/utils/xml2nebinput.py", line 55, in <module>
    neb_in = xml_conf.get_qe_input()
  File "/home/pietro/qexsd-gh/qespresso/documents.py", line 129, in get_qe_input
    return qe_input.get_qe_input()
  File "/home/pietro/qexsd-gh/qespresso/converters.py", line 271, in get_qe_input
    lines.extend(_get_qe_input(card, **card_args))
TypeError: 'NoneType' object is not iterable
